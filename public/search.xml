<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>统一命名规则</title>
      <link href="/2020/01/10/rules/"/>
      <url>/2020/01/10/rules/</url>
      
        <content type="html"><![CDATA[<p>盘D:<br>手动安装的应用         –&gt; Applications</p><p>盘E:<br>自己写程序的目录       –&gt; Apps</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go 编码基本规范</title>
      <link href="/2017/10/13/go%E7%BC%96%E7%A0%81%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/"/>
      <url>/2017/10/13/go%E7%BC%96%E7%A0%81%E5%9F%BA%E6%9C%AC%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="声明空的切片-Slices"><a href="#声明空的切片-Slices" class="headerlink" title="声明空的切片 (Slices)"></a>声明空的切片 (Slices)</h2><p>相对于 <code>t := []string{}</code> 更推崇 <code>var t []string</code></p><p>前者是 <code>non-nil</code>, 但是长度为0, 而后者声明了一个 <code>nil</code> 的 <code>slice</code>. 都能实现相应的功能 ( 函数 <code>len</code> 和 <code>cap</code> 都为 0 ), 但应该首选 <code>nil</code> <code>slice</code></p><p>只有在特定的情况下, 选择 <code>non-nil</code> 但长度为 0 的 <code>slice</code></p><ul><li>编码 JSON 对象的时候<blockquote><p><code>nil slice</code> 编码为 <code>null</code>, 而 <code>[]string{}</code> 编码为 JSON 数组 <code>[]</code></p></blockquote></li></ul><p>设计接口时, 不区分两者的区别, 可能导致微妙的编程错误</p><h2 id="Crypto-Rand"><a href="#Crypto-Rand" class="headerlink" title="Crypto Rand"></a>Crypto Rand</h2><p>即便使用一次, 也不要使用 <code>math/rand</code> 生成键.</p><p>使用 <code>crypto/rand</code> 的 Reader:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"crypto/rand"</span></span><br><span class="line">  <span class="comment">// "encoding/base64"</span></span><br><span class="line">  <span class="comment">// "encoding/hex"</span></span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Key</span><span class="params">()</span> <span class="title">string</span></span>&#123;</span><br><span class="line">  buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">16</span>)</span><br><span class="line">  _, err = rand.Read(buf)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%x"</span>, buf)</span><br><span class="line">  <span class="comment">// or hex.EncodeToString(buf)</span></span><br><span class="line">  <span class="comment">// or base64.StdEncoding.EncodeToString(buf)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><p>避免重命名导入从而避免名称冲突; 如果发生冲突, 最好重命名本地或特殊项目的导入包.</p><p>导入时, 应组织分组, 之间添加空行. 标准库的包总在第一组内.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">  <span class="string">"hash/adler32"</span></span><br><span class="line">  <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"appengine/foo"</span></span><br><span class="line">  <span class="string">"appengine/user"</span></span><br><span class="line"></span><br><span class="line">  <span class="string">"code.google.com/p/x/y"</span></span><br><span class="line">  <span class="string">"github.com/foo/bar"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Import-三种方式"><a href="#Import-三种方式" class="headerlink" title="Import 三种方式"></a>Import 三种方式</h2><ol><li><p>点操作<br> <code>import( . &quot;fmt&quot;)</code></p><blockquote><p>这个点操作的含义就是这个包导入之后在你调用这个包的函数时，你可以省略前缀的包名，也就是前面你调用的 <code>fmt.Println(&quot;hello world&quot;)</code> 可以省略的写成 <code>Println(&quot;hello world&quot;)</code></p></blockquote></li><li><p>别名操作 ( 别名操作顾名思义可以把包命名成另一个用起来容易记忆的名字 )</p><blockquote><p><code>import( f &quot;fmt&quot; )</code>   别名操作调用包函数时前缀变成了重命名的前缀，即 <code>f.Println(&quot;hello world&quot;)</code></p></blockquote></li><li><p>_操作   这个操作经常是让很多人费解的一个操作符，请看下面这个import</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"database/sql"</span></span><br><span class="line">  _ <span class="string">"github.com/ziutek/mymysql/godrv"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p><code>_</code> 操作其实只是引入该包. 当导入一个包时, 它所有的 <code>init()</code> 函数就会被执行，但有些时候并非真的需要使用这些包, 仅仅是希望它的 <code>init()</code> 函数被执行而已. 这个时候就可以使用_操作引用该包了. 即使用_操作引用包是无法通过包名来调用包中的导出函数, 而是只是为了简单的调用其init函数(). </p></blockquote></li></ol><h2 id="Import-Dot"><a href="#Import-Dot" class="headerlink" title="Import Dot"></a>Import Dot</h2><p><code>import .</code> 的形式可以用于测试场景, 由于循环依赖, 不能成为被测试包的一部分</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> foo_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bar/testutil"</span> <span class="comment">// 同样也 import "foo"</span></span><br><span class="line">. <span class="string">"foo"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种情况下, 由于 <code>bar/testtuil</code> 包中导入了 <code>foo</code>, 所以 <code>foo_test</code> 不能再次包含 <code>foo</code> 这个包. 所以我们使用 <code>import .</code> 的形式. 除了这种情况外, 不要使用 <code>import .</code>. 它让程序更难阅读.</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go 函数的接收类型何时应该使用指针</title>
      <link href="/2017/10/13/go%E6%8C%87%E9%92%88%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/"/>
      <url>/2017/10/13/go%E6%8C%87%E9%92%88%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<p>对于刚入门 Go 的人来说, 为函数的 receiver 指定为 <strong>值类型</strong> 或 <strong>指针类型</strong> 是很困难的. 如果不知道如何取舍, 选择指针类型的 reveiver. 但是有时候 <strong>值类型</strong> 的 receiver 更加合适, 比如对象是一些轻量级的不变的 structs, 使用 <strong>值类型</strong> 的 receiver 会更加高效. 下面是列举了一些常用的判断指导.</p><h2 id="使用指针类型"><a href="#使用指针类型" class="headerlink" title="使用指针类型"></a>使用指针类型</h2><ul><li>如果该函数会修改receiver</li><li>如果receiver是 <code>struct</code> 并且包含互斥类型 <code>sync.Mutex</code>，或者是类似的同步变量，receiver必须是指针，这样可以避免对象拷贝</li><li>如果receiver是较大的 <code>struct</code> 或者 <code>array</code>，使用指针则更加高效。多大才算大？假设 <code>struct</code> 内所有成员都要作为函数变量传进去，如果觉得这时数据太多，就是 <code>struct</code> 太大</li><li>如果receiver是 <code>struct</code>, <code>array</code> 或者 <code>slice</code>, 并且其中某个element指向了某个可变量，则这个时候receiver选指针会使代码的意图更加明显</li></ul><h2 id="不使用"><a href="#不使用" class="headerlink" title="不使用"></a>不使用</h2><ul><li>如果receiver是 <code>map</code>、<code>func</code> 或者 <code>chan</code></li><li>如果receiver是 <code>slice</code> 并且该函数并不会修改此 <code>slice</code></li><li>如果receiver使较小的 <code>struct</code> 或者 <code>array</code>，并且其变量都是些不变量、常量，例如 <code>time.Time</code> , 因为 <strong>值类型</strong> 的 receiver 可以减少需要回收的垃圾量</li></ul><blockquote><p><strong>最后，如果不确定用哪个，使用指针类型的receiver</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(转)Go结构体和指针</title>
      <link href="/2017/10/12/go%E6%8C%87%E9%92%88%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93/"/>
      <url>/2017/10/12/go%E6%8C%87%E9%92%88%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址: <a href="https://github.com/jemygraw/TechDoc/blob/master/Go%E8%BD%BB%E6%9D%BE%E5%AD%A6/go_tutorial_8_struct_interface.md" target="_blank" rel="noopener">jemygraw/TechDoc</a></p></blockquote><p>基本上到这里的时候，就是上了一个台阶了。Go的精华特点即将展开。</p><h2 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a><strong>结构体定义</strong></h2><p>上面我们说过Go的指针和C的不同，结构体也是一样的。Go是一门删繁就简的语言，一切令人困惑的特性都必须去掉。</p><p>简单来讲，Go提供的<code>结构体</code>就是把<code>使用各种数据类型定义</code>的<code>不同变量组合起来</code>的<code>高级数据类型</code>。闲话不多说，看例子:</p><pre><code>type Rect struct {    width float64    length float64}</code></pre><p>上面我们定义了一个矩形结构体，首先是关键是<code>type</code>表示要<code>定义一个新的数据类型了</code>，然后是新的数据类型名称<code>Rect</code>，最后是<code>struct</code>关键字，表示这个高级数据类型是结构体类型。在上面的例子中，因为<code>width和length的数据类型相同</code>，还可以写成如下格式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>好了，来用结构体干点啥吧，计算一下矩形面积。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect Rect</span><br><span class="line">  rect.width = <span class="number">100</span></span><br><span class="line">  rect.length = <span class="number">200</span></span><br><span class="line">  fmt.Println(rect.width * rect.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的例子看到，其实结构体类型和基础数据类型使用方式差不多，唯一的区别就是结构体类型可以通过<code>.</code>来访问内部的成员。包括<code>给内部成员赋值</code>和<code>读取内部成员值</code>。</p><p>在上面的例子中，我们是用var关键字先定义了一个Rect变量，然后对它的成员赋值。我们也可以使用初始化的方式来给Rect变量的内部成员赋值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = Rect&#123;width: <span class="number">100</span>, length: <span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(rect.width * rect.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然<code>如果你知道结构体成员定义的顺序</code>，也可以不使用<code>key:value</code>的方式赋值，<code>直接按照结构体成员定义的顺序给它们赋值</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = Rect&#123;<span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">"Width:"</span>, rect.width, <span class="string">"* Length:"</span>,</span><br><span class="line">    rect.length, <span class="string">"= Area:"</span>, rect.width*rect.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><pre><code>Width: 100 * Length: 200 = Area: 20000</code></pre><p><strong>结构体参数传递方式</strong></p><p>我们说过，<code>Go函数的参数传递方式是值传递</code>，这句话<code>对结构体也是适用的</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">double_area</span><span class="params">(rect Rect)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  rect.width *= <span class="number">2</span></span><br><span class="line">  rect.length *= <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = Rect&#123;<span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line">  fmt.Println(double_area(rect))</span><br><span class="line">  fmt.Println(<span class="string">"Width:"</span>, rect.width, <span class="string">"Length:"</span>, rect.length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子输出为:</p><pre><code>80000Width: 100 Length: 200</code></pre><p>也就说虽然在double_area函数里面我们将结构体的宽度和长度都加倍，但仍然没有影响main函数里面的rect变量的宽度和长度。</p><h2 id="结构体组合函数"><a href="#结构体组合函数" class="headerlink" title="结构体组合函数"></a><strong>结构体组合函数</strong></h2><p>上面我们在main函数中计算了矩形的面积，但是我们觉得矩形的面积如果能够作为矩形结构体的“内部函数”提供会更好。这样我们就可以直接说这个矩形面积是多少，而不用另外去取宽度和长度去计算。现在我们看看结构体“内部函数”定义方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect Rect)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = Rect&#123;<span class="number">100</span>, <span class="number">200</span>&#125;</span><br><span class="line"></span><br><span class="line">  fmt.Println(<span class="string">"Width:"</span>, rect.width, <span class="string">"Length:"</span>, rect.length,</span><br><span class="line">    <span class="string">"Area:"</span>, rect.area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咦？这个是什么“内部方法”，根本没有定义在Rect数据类型的内部啊？</p><p>确实如此，我们看到，虽然main函数中的rect变量可以直接调用函数area()来获取矩形面积，但是area()函数确实没有定义在Rect结构体内部，这点和C语言的有很大不同。<code>Go使用组合函数的方式来为结构体定义结构体方法</code>。我们仔细看一下上面的area()函数定义。</p><p>首先是关键字<code>func</code>表示这是一个函数，第二个参数是<code>结构体类型和实例变量</code>，第三个是<code>函数名称</code>，第四个是<code>函数返回值</code>。这里我们可以看出area()函数和普通函数定义的<code>区别就在于</code>area()函数<code>多了一个结构体类型限定</code>。这样一来Go就知道了这是一个为结构体定义的<code>方法</code>。</p><p>这里需要注意一点就是<code>定义在结构体上面的函数(function)</code>一般叫做<code>方法(method)</code>。</p><h2 id="结构体和指针"><a href="#结构体和指针" class="headerlink" title="结构体和指针"></a><strong>结构体和指针</strong></h2><p>我们在指针一节讲到过，<code>指针的主要作用就是在函数内部改变传递进来变量的值</code>。对于上面的计算矩形面积的例子，我们可以修改一下代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect *Rect)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = <span class="built_in">new</span>(Rect)</span><br><span class="line">  rect.width = <span class="number">100</span></span><br><span class="line">  rect.length = <span class="number">200</span></span><br><span class="line">  fmt.Println(<span class="string">"Width:"</span>, rect.width, <span class="string">"Length:"</span>, rect.length,</span><br><span class="line">    <span class="string">"Area:"</span>, rect.area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的例子中，使用了new函数来创建一个结构体指针rect，也就是说rect的类型是*Rect，结构体遇到指针的时候，你<code>不需要使用*去访问结构体的成员</code>，直接使用<code>.</code>引用就可以了。所以上面的例子中我们直接使用<code>rect.width=100</code> 和<code>rect.length=200</code>来设置结构体成员值。因为这个时候rect是结构体指针，所以我们定义area()函数的时候结构体限定类型为<code>*Rect</code>。</p><p>其实在计算面积的这个例子中，我们不需要改变矩形的宽或者长度，所以定义area函数的时候结构体限定类型仍然为<code>Rect</code>也是可以的。如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect Rect)</span> <span class="title">area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = <span class="built_in">new</span>(Rect)</span><br><span class="line">  rect.width = <span class="number">100</span></span><br><span class="line">  rect.length = <span class="number">200</span></span><br><span class="line">  fmt.Println(<span class="string">"Width:"</span>, rect.width, <span class="string">"Length:"</span>, rect.length,</span><br><span class="line">    <span class="string">"Area:"</span>, rect.area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里Go足够聪明，所以rect.area()也是可以的。</p><p>至于<code>使不使用结构体指针和使不使用指针的出发点是一样的</code>，那就是<code>你是否试图在函数内部改变传递进来的参数的值</code>。再举个例子如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Rect <span class="keyword">struct</span> &#123;</span><br><span class="line">  width, length <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rect *Rect)</span> <span class="title">double_area</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">  rect.width *= <span class="number">2</span></span><br><span class="line">  rect.length *= <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> rect.width * rect.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = <span class="built_in">new</span>(Rect)</span><br><span class="line">  rect.width = <span class="number">100</span></span><br><span class="line">  rect.length = <span class="number">200</span></span><br><span class="line">  fmt.Println(*rect)</span><br><span class="line">  fmt.Println(<span class="string">"Double Width:"</span>, rect.width, <span class="string">"Double Length:"</span>, rect.length,</span><br><span class="line">    <span class="string">"Double Area:"</span>, rect.double_area())</span><br><span class="line">  fmt.Println(*rect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子的输出是：</p><pre><code>{100 200}Double Width: 200 Double Length: 400 Double Area: 80000{200 400}</code></pre><h2 id="结构体内嵌类型"><a href="#结构体内嵌类型" class="headerlink" title="结构体内嵌类型"></a><strong>结构体内嵌类型</strong></h2><p>我们可以在一个<code>结构体内部定义另外一个结构体类型的成员</code>。例如iPhone也是Phone，我们看下例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">  price <span class="keyword">int</span></span><br><span class="line">  color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">  phone Phone</span><br><span class="line">  model <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> p IPhone</span><br><span class="line">  p.phone.price = <span class="number">5000</span></span><br><span class="line">  p.phone.color = <span class="string">"Black"</span></span><br><span class="line">  p.model = <span class="string">"iPhone 5"</span></span><br><span class="line">  fmt.Println(<span class="string">"I have a iPhone:"</span>)</span><br><span class="line">  fmt.Println(<span class="string">"Price:"</span>, p.phone.price)</span><br><span class="line">  fmt.Println(<span class="string">"Color:"</span>, p.phone.color)</span><br><span class="line">  fmt.Println(<span class="string">"Model:"</span>, p.model)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><pre><code>I have a iPhone:Price: 5000Color: BlackModel: iPhone 5</code></pre><p>在上面的例子中，我们在结构体IPhone里面定义了一个Phone变量phone，然后我们可以像正常的访问结构体成员一样访问phone的成员数据。但是我们原来的意思是<code>“iPhone也是(is-a)Phone”</code>，而这里的结构体IPhone里面定义了一个phone变量，给人的感觉就是<code>“iPhone有一个(has-a)Phone”</code>，挺奇怪的。当然Go也知道这种方式很奇怪，所以支持如下做法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">  price <span class="keyword">int</span></span><br><span class="line">  color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">  Phone</span><br><span class="line">  model <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> p IPhone</span><br><span class="line">  p.price = <span class="number">5000</span></span><br><span class="line">  p.color = <span class="string">"Black"</span></span><br><span class="line">  p.model = <span class="string">"iPhone 5"</span></span><br><span class="line">  fmt.Println(<span class="string">"I have a iPhone:"</span>)</span><br><span class="line">  fmt.Println(<span class="string">"Price:"</span>, p.price)</span><br><span class="line">  fmt.Println(<span class="string">"Color:"</span>, p.color)</span><br><span class="line">  fmt.Println(<span class="string">"Model:"</span>, p.model)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为</p><pre><code>I have a iPhone:Price: 5000Color: BlackModel: iPhone 5</code></pre><p>在这个例子中，我们定义IPhone结构体的时候，<code>不再定义Phone变量</code>，<code>直接把结构体Phone类型定义在那里</code>。然后IPhone就可以<code>像访问直接定义在自己结构体里面的成员一样访问Phone的成员</code>。</p><p>上面的例子中，我们演示了结构体的内嵌类型以及内嵌类型的成员访问，除此之外，假设结构体A内部定义了一个内嵌结构体B，那么A同时也可以调用所有定义在B上面的函数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">struct</span> &#123;</span><br><span class="line">  price <span class="keyword">int</span></span><br><span class="line">  color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(phone Phone)</span> <span class="title">ringing</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"Phone is ringing..."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">  Phone</span><br><span class="line">  model <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> p IPhone</span><br><span class="line">  p.price = <span class="number">5000</span></span><br><span class="line">  p.color = <span class="string">"Black"</span></span><br><span class="line">  p.model = <span class="string">"iPhone 5"</span></span><br><span class="line">  fmt.Println(<span class="string">"I have a iPhone:"</span>)</span><br><span class="line">  fmt.Println(<span class="string">"Price:"</span>, p.price)</span><br><span class="line">  fmt.Println(<span class="string">"Color:"</span>, p.color)</span><br><span class="line">  fmt.Println(<span class="string">"Model:"</span>, p.model)</span><br><span class="line"></span><br><span class="line">  p.ringing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><pre><code>I have a iPhone:Price: 5000Color: BlackModel: iPhone 5Phone is ringing...</code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a><strong>接口</strong></h2><p>我们先看一个例子，关于Nokia手机和iPhone手机都能够打电话的例子。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NokiaPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span> <span class="title">call</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"I am Nokia, I can call you!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span> <span class="title">call</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"I am iPhone, I can call you!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> nokia NokiaPhone</span><br><span class="line">  nokia.call()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> iPhone IPhone</span><br><span class="line">  iPhone.call()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义了NokiaPhone和IPhone，它们都有各自的方法call()，表示自己都能够打电话。但是我们想一想，是手机都应该能够打电话，所以这个不算是NokiaPhone或是IPhone的独特特点。否则iPhone不可能卖这么贵了。</p><p>再仔细看一下<code>接口的定义</code>，首先是关键字<code>type</code>，然后是<code>接口名称</code>，最后是关键字<code>interface</code>表示这个类型是接口类型。<code>在接口类型里面，我们定义了一组方法</code>。</p><p>Go语言提供了一种接口功能，它把所有的具有共性的方法定义在一起，<code>任何其他类型只要实现了这些方法就是实现了这个接口</code>，<code>不一定非要显式地声明</code>要去实现哪些接口啦。比如上面的手机的call()方法，就完全可以定义在接口Phone里面，而NokiaPhone和IPhone只要实现了这个接口就是一个Phone。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Phone <span class="keyword">interface</span> &#123;</span><br><span class="line">  call()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NokiaPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span> <span class="title">call</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"I am Nokia, I can call you!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> IPhone <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span> <span class="title">call</span><span class="params">()</span></span> &#123;</span><br><span class="line">  fmt.Println(<span class="string">"I am iPhone, I can call you!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> phone Phone</span><br><span class="line"></span><br><span class="line">  phone = <span class="built_in">new</span>(NokiaPhone)</span><br><span class="line">  phone.call()</span><br><span class="line"></span><br><span class="line">  phone = <span class="built_in">new</span>(IPhone)</span><br><span class="line">  phone.call()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，我们定义了一个接口Phone，接口里面有一个方法call()，仅此而已。然后我们在main函数里面定义了一个Phone类型变量，并分别为之赋值为NokiaPhone和IPhone。然后调用call()方法，输出结果如下：</p><pre><code>I am Nokia, I can call you!I am iPhone, I can call you!</code></pre><p>以前我们说过，<code>Go语言式静态类型语言，变量的类型在运行过程中不能改变</code>。但是在上面的例子中，phone变量好像先定义为Phone类型，然后是NokiaPhone类型，最后成为了IPhone类型，真的是这样吗？</p><p>原来，在Go语言里面，<code>一个类型A只要实现了接口X所定义的全部方法</code>，那么<code>A类型的变量</code>也是<code>X类型的变量</code>。在上面的例子中，NokiaPhone和IPhone都实现了Phone接口的call()方法，所以它们都是Phone，这样一来是不是感觉正常了一些。</p><p>我们为Phone添加一个方法sales()，再来熟悉一下接口用法。</p><pre><code class="go"><span class="keyword">package</span> main<span class="keyword">import</span> (  <span class="string">"fmt"</span>)<span class="keyword">type</span> Phone <span class="keyword">interface</span> {  call()  sales() <span class="keyword">int</span>}<span class="keyword">type</span> NokiaPhone <span class="keyword">struct</span> {  price <span class="keyword">int</span>}<span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span> <span class="title">call</span><span class="params">()</span></span> {  fmt.Println(<span class="string">"I am Nokia, I can call you!"</span>)}<span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span> <span class="title">sales</span><span class="params">()</span> <span class="title">int</span></span> {  <span class="keyword">return</span> nokiaPhone.price}<span class="keyword">type</span> IPhone <span class="keyword">struct</span> {  price <span class="keyword">int</span>}<span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span> <span class="title">call</span><span class="params">()</span></span> {  fmt.Println(<span class="string">"I am iPhone, I can call you!"</span>)}<span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span> <span class="title">sales</span><span class="params">()</span> <span class="title">int</span></span> {  <span class="keyword">return</span> iPhone.price}<span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {  <span class="keyword">var</span> phones = [<span class="number">5</span>]Phone{    NokiaPhone{price: <span class="number">350</span>},    IPhone{price: <span class="number">5000</span>},    IPhone{price: <span class="number">3400</span>},    NokiaPhone{price: <span class="number">450</span>},    IPhone{price: <span class="number">5000</span>},  }  <span class="keyword">var</span> totalSales = <span class="number">0</span>  <span class="keyword">for</span> _, phone := <span class="keyword">range</span> phones {    totalSales += phone.sales()  }  fmt.Println(totalSales)}</code></pre><p>输出结果：</p><pre><code>14200</code></pre><p>上面的例子中，我们定义了一个手机数组，然后计算手机的总售价。可以看到，由于NokiaPhone和IPhone都实现了sales()方法，所以它们都是Phone类型，但是计算售价的时候，Go会知道调用哪个对象实现的方法。</p><p>接口类型还可以作为结构体的数据成员。</p><p>假设有个败家子，iPhone没有出的时候，买了好几款Nokia，iPhone出来后，又买了好多部iPhone，老爸要来看看这小子一共花了多少钱。</p><pre><code class="go"><span class="keyword">package</span> main<span class="keyword">import</span> (  <span class="string">"fmt"</span>)<span class="keyword">type</span> Phone <span class="keyword">interface</span> {  sales() <span class="keyword">int</span>}<span class="keyword">type</span> NokiaPhone <span class="keyword">struct</span> {  price <span class="keyword">int</span>}<span class="function"><span class="keyword">func</span> <span class="params">(nokiaPhone NokiaPhone)</span> <span class="title">sales</span><span class="params">()</span> <span class="title">int</span></span> {  <span class="keyword">return</span> nokiaPhone.price}<span class="keyword">type</span> IPhone <span class="keyword">struct</span> {  price <span class="keyword">int</span>}<span class="function"><span class="keyword">func</span> <span class="params">(iPhone IPhone)</span> <span class="title">sales</span><span class="params">()</span> <span class="title">int</span></span> {  <span class="keyword">return</span> iPhone.price}<span class="keyword">type</span> Person <span class="keyword">struct</span> {  phones []Phone  name   <span class="keyword">string</span>  age    <span class="keyword">int</span>}<span class="function"><span class="keyword">func</span> <span class="params">(person Person)</span> <span class="title">total_cost</span><span class="params">()</span> <span class="title">int</span></span> {  <span class="keyword">var</span> sum = <span class="number">0</span>  <span class="keyword">for</span> _, phone := <span class="keyword">range</span> person.phones {    sum += phone.sales()  }  <span class="keyword">return</span> sum}<span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> {  <span class="keyword">var</span> bought_phones = [<span class="number">5</span>]Phone{    NokiaPhone{price: <span class="number">350</span>},    IPhone{price: <span class="number">5000</span>},    IPhone{price: <span class="number">3400</span>},    NokiaPhone{price: <span class="number">450</span>},    IPhone{price: <span class="number">5000</span>},  }  <span class="keyword">var</span> person = Person{name: <span class="string">"Jemy"</span>, age: <span class="number">25</span>, phones: bought_phones[:]}  fmt.Println(person.name)  fmt.Println(person.age)  fmt.Println(person.total_cost())}</code></pre><p>这个例子纯为演示接口作为结构体数据成员，如有雷同，纯属巧合。这里面我们定义了一个Person结构体，结构体内部定义了一个手机类型切片。另外我们定义了Person的total_cost()方法用来计算手机花费总额。输出结果如下：</p><pre><code>Jemy2514200</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h2><p>Go的结构体和接口的实现方法可谓删繁就简，去除了很多别的语言令人困惑的地方，而且学习难度也不大，很容易上手。不过由于思想比较独到，也有可能会有人觉得功能太简单而无用，这个就各有看法了，不过在逐渐的使用过程中，我们会慢慢领悟到这种设计所带来的好处，以及所避免的问题。</p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo 在遇到 “{% raw %}{{{% endraw %}” 符号时出现解析报错</title>
      <link href="/2017/10/12/hexo_exceptions/"/>
      <url>/2017/10/12/hexo_exceptions/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接: <a href="https://icewing.cc/post/hexo-bug-of-quot.html" target="_blank" rel="noopener">https://icewing.cc/post/hexo-bug-of-quot.html</a></p></blockquote><p>最近在更新一篇文章后，无论是 hexo g 生成，还是 hexo s 预览都会报解析错误， 大致如下，后面还有很长的信息，就不贴了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Template render error: (unknown path) [Line 25, Column 85]</span><br><span class="line">  unexpected token: .</span><br></pre></td></tr></table></figure><p>而把那篇文章移除后一切又是正常的。从错误上来看基本可以判断是模板解析错误，从 <code>unexpected token: .</code> 又看不出来具体是哪里出错，一直找不到原因。</p><p>今天查找资料发现有人遇到和我类似的问题，但报的是 <code>unexpected token: }}</code> 的错误。搜索一下我那篇文章，果然有好几处带有 <code>}}</code> 符号。尝试着把几处符号删除，果然正常了。看来问题真的出在 <code>}}</code> 上面。</p><p>直接说解决方案吧，参考别人的解决方法是在 <code>}}</code> 中间加一个空格，但因为我的是有部分教程含义的文章，所以并不想这样误导人。于是去 github 上找解决方案。</p><p>github 上给出的方法是在需要显示 <code>}}</code>符号的地方加上 <code>` 标签，标记这部分不需要解析。例如文章中可能会出现 `` 的片段，写成 `{{ something }}</code> 就可以了。</p><p>虽然有点麻烦，但也算临时解决了这个问题，这是个已知 bug ，希望后续的版本能修复吧，毕竟使用太多 hexo 专属的标签对博客以后的迁移、改版什么的来说还是很麻烦的。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo excetpion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 5.x.x 在 Windows 下基本使用</title>
      <link href="/2017/03/27/elasticsearch-windows-2_basic_usage/"/>
      <url>/2017/03/27/elasticsearch-windows-2_basic_usage/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# 中的协变性、逆变性和不变性</title>
      <link href="/2017/03/18/covarianceAndContravariance/"/>
      <url>/2017/03/18/covarianceAndContravariance/</url>
      
        <content type="html"><![CDATA[<h1 id="C-中的协变性、逆变性和不变性"><a href="#C-中的协变性、逆变性和不变性" class="headerlink" title="C# 中的协变性、逆变性和不变性"></a>C# 中的协变性、逆变性和不变性</h1><h2 id="协变和逆变的概念-ensp"><a href="#协变和逆变的概念-ensp" class="headerlink" title="协变和逆变的概念&ensp;"></a>协变和逆变的概念&ensp;</h2><ul><li><p>协变性: 子类转化为父类 string -&gt; object</p></li><li><p>逆变性: 父类强制转换为子类 object -&gt; string 或者 object -&gt; (object)string</p></li><li><p>不变性: 既不可以协变也不可以逆变 (List<t> || 自定义泛型类型不加 out 或 in 修饰)</t></p></li></ul><h2 id="泛型类型的可变性"><a href="#泛型类型的可变性" class="headerlink" title="泛型类型的可变性"></a>泛型类型的可变性</h2><h3 id="泛型修饰符"><a href="#泛型修饰符" class="headerlink" title="泛型修饰符"></a>泛型修饰符</h3><blockquote><p>out (返回值): 对于泛型参数, out 关键字指定给类型参数是协变的.</p></blockquote><blockquote><p>in (输入参数): 对于泛型参数, in 关键字指定改类型那个参数是逆变的.</p></blockquote><ul><li>可以在泛型接口或泛型委托中使用</li><li>泛型参数中 in 和 out 可以共同存在</li></ul><a id="more"></a><h3 id="框架定义的泛型委托"><a href="#框架定义的泛型委托" class="headerlink" title="框架定义的泛型委托"></a>框架定义的泛型委托</h3><ul><li><code>Action&lt;T&gt;</code> (T 支持逆变)</li><li><code>Func&lt;TResult&gt;</code> (T 支持协变)</li><li><code>Comparison&lt;T&gt;</code></li><li><code>Predicate&lt;T&gt;</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public delegate TResult Func&lt;out TResult&gt;();</span><br><span class="line">public delegate void Action&lt;in T&gt;(T obj);</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义泛型委托"><a href="#自定义泛型委托" class="headerlink" title="自定义泛型委托"></a>自定义泛型委托</h3><h3 id="框架定义的泛型接口"><a href="#框架定义的泛型接口" class="headerlink" title="框架定义的泛型接口"></a>框架定义的泛型接口</h3><ul><li><code>IEnumerable&lt;T&gt;</code> (T 支持协变)</li><li><code>IEnumerator&lt;T&gt;</code> (T 支持协变)</li><li><code>IQueryable&lt;T&gt;</code> (T 支持协变)</li><li><code>IGrouping&lt;TKey, TElement&gt;</code> (TKey 和 TElement 支持协变)</li><li><code>IComparer&lt;T&gt;</code> (T 支持逆变)</li><li><code>IEqualityComparer&lt;T&gt;</code> (T 支持逆变)</li><li><code>IComparable&lt;T&gt;</code> (T 支持逆变)</li></ul><h3 id="自定义泛型接口"><a href="#自定义泛型接口" class="headerlink" title="自定义泛型接口"></a>自定义泛型接口</h3><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="为什么-out-返回值-只能协变"><a href="#为什么-out-返回值-只能协变" class="headerlink" title=" 为什么 out(返回值) 只能协变? "></a><p style="color:red;"> 为什么 out(返回值) 只能协变? </p></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IEnumerable&lt;object&gt; obj = new List&lt;object&gt;();</span><br><span class="line">//如果在这里我想obj中添加</span><br><span class="line">IEnumeralbe&lt;string&gt; str = obj;</span><br></pre></td></tr></table></figure><h4 id="为什么-out-返回值-只能协变-1"><a href="#为什么-out-返回值-只能协变-1" class="headerlink" title=" 为什么 out(返回值) 只能协变? "></a><p style="color:red;"> 为什么 out(返回值) 只能协变? </p></h4>]]></content>
      
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# Syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 VS 中远程部署 ASP.NET MVC 项目到服务器</title>
      <link href="/2017/02/22/vs_remote_deployment_webapp/"/>
      <url>/2017/02/22/vs_remote_deployment_webapp/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想必以前我们都有过将 ASP.NET MVC 项目部署到远程服务器的经历, 最普通也最麻烦的方法就是将发布后的项目打包上传到远程服务器, 操作起来非常不方便. VS 其实从很早就支持将项目 Publish 到远程的操作.</p><blockquote><p>现在也有很多自动化部署工具, Jenkins, PowerShell 脚本等等, 暂不讨论</p></blockquote><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><p>Windows Server 2008 R2 Enterprise<br>Visual Studio 13 +</p><h2 id="配置远程服务器"><a href="#配置远程服务器" class="headerlink" title="配置远程服务器"></a>配置远程服务器</h2><h3 id="安装-Web-Deploy"><a href="#安装-Web-Deploy" class="headerlink" title="安装 Web Deploy"></a>安装 Web Deploy</h3><p>Web Deploy, 下载地址: <a href="http://www.iis.net/downloads/microsoft/web-deploy" target="_blank" rel="noopener">http://www.iis.net/downloads/microsoft/web-deploy</a></p><blockquote><p>安装 3.5 以上版本, 否则发布项目时会出项 “无法连接到远程服务器” 的错误提示</p></blockquote><a id="more"></a><h3 id="启用-IIS-的管理服务"><a href="#启用-IIS-的管理服务" class="headerlink" title="启用 IIS 的管理服务"></a>启用 IIS 的管理服务</h3><p>在管理服务中添加 IIS 的 Management Service 功能.</p><p><img src="/assets/webdeploy/1.server_manager_add_features.png" alt></p><p><img src="/assets/webdeploy/2.iis_management_service.png" alt></p><p>安装完成之后, 确保在 “服务” 中将其启动:</p><p><img src="/assets/webdeploy/3.as_service_started.png" alt></p><blockquote><p>如果该服务没有启动, 或者没有启用 “Management Service” 功能, 则在使用 Web Deploy 部署项目时会遇到如下错误: <img src="/assets/webdeploy/4.error.png" alt></p></blockquote><h3 id="IIS-设置"><a href="#IIS-设置" class="headerlink" title="IIS 设置"></a>IIS 设置</h3><p>启用管理服务后, 进入 IIS, 会多出 Management Service 选项:</p><p><img src="/assets/webdeploy/5.iis_home.png" alt></p><p>双击进行配置:</p><p><img src="/assets/webdeploy/6.management_service_setting.png" alt></p><h3 id="配置远部署项目的账户"><a href="#配置远部署项目的账户" class="headerlink" title="配置远部署项目的账户"></a>配置远部署项目的账户</h3><p>双击 IIS Manager Users:</p><p><img src="/assets/webdeploy/7.iis_user.png" alt></p><p>点击 Add User…:</p><p><img src="/assets/webdeploy/8.iis_user_add.png" alt></p><p>输入用户名密码:</p><blockquote><p>在 VS 中发布是也需要此次输入的用户名和密码</p></blockquote><p><img src="/assets/webdeploy/9.iis_user_name_pass.png" alt></p><h3 id="配置站点用户权限"><a href="#配置站点用户权限" class="headerlink" title="配置站点用户权限"></a>配置站点用户权限</h3><p>点击要发布的站点, 然后选择 IIS Manager Persmissions:</p><p><img src="/assets/webdeploy/10.iis_user_permission.png" alt></p><p>之后点击 “Allow User” :</p><p><img src="/assets/webdeploy/11.iis_allow_user.png" alt></p><p>将之前添加的 test 用户加入:</p><p><img src="/assets/webdeploy/12.select_user.png" alt></p><h3 id="为站点目录添加本地服务的修改权限"><a href="#为站点目录添加本地服务的修改权限" class="headerlink" title="为站点目录添加本地服务的修改权限"></a>为站点目录添加本地服务的修改权限</h3><p>“LOCAL SERVICE” 账户要有修改 项目发布文件夹 的权限:</p><p><img src="/assets/webdeploy/17.floder_peimission.png" alt></p><p><img src="/assets/webdeploy/18.full_setting.png" alt></p><h2 id="使用-Visual-Studio-2015-远程部署项目"><a href="#使用-Visual-Studio-2015-远程部署项目" class="headerlink" title="使用 Visual Studio 2015 远程部署项目"></a>使用 Visual Studio 2015 远程部署项目</h2><p>新建一个配置文件:</p><p><img src="/assets/webdeploy/13.pubish.png" alt></p><p>配置 Web Deploy:</p><p><img src="/assets/webdeploy/15.connection.png" alt></p><p>点击检查就可以了:</p><p><img src="/assets/webdeploy/16.check.png" alt></p><blockquote><p>默认会在本地浏览器打开</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Visual Stduio </tag>
            
            <tag> ASP.NET MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 5.x.x 在 Windows 下安装配置</title>
      <link href="/2017/01/18/elasticsearch-windows-1_install_plugins/"/>
      <url>/2017/01/18/elasticsearch-windows-1_install_plugins/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>关于 Elasticsearch 的介绍可以查看 <a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="noopener">Elasticsearch 权威指南</a>, 讲解的非常详细.</p><p>本文主要讲解, Elasticsearch 5.x.x 版本在 Windows 环境下的安装和中文分词插件配置</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>由于 Elasticsearch 是基于 Lucene 的, 所以要依赖 Java 环境</p><ul><li><p>安装最新版 JAVA, 由 <a href="http://www.java.com/" target="_blank" rel="noopener">www.java.com</a> 下载</p><p>  安装目录示例: <code>C:\Program Files\Java</code></p></li></ul><a id="more"></a>    <ul><li><p>配置 JAVA 环境变量</p><p>  新建系统变量 JAVA_HOME, 指向 JAVA 安装路径<br>  <img src="/assets/elasticsearch/java_home.png" alt><br>  编辑系统变量中 Path ,新增 <code>%JAVA_HOME%\bin</code> 或 <code>%JAVA_HOME%\jre\bin</code><br>  <img src="/assets/elasticsearch/path_java_home.png" alt></p></li><li><p>下载 Elasticsearch 5.x.x 版本 zip 包, 可由 <a href="http://www.elasticsearch.org/download/" target="_blank" rel="noopener">elasticsearch.org/download</a> 下载, 解压到相应目录<br>  <img src="/assets/elasticsearch/elasticsearch511.png" alt></p></li><li><p>现在可直接在控制台运行 elasticsearch.bat, 就已经启动了 elasticsearch 服务, 可在浏览器中输入 localhost:9200 查看状态<br>  <img src="/assets/elasticsearch/9200status.png" alt></p></li></ul><blockquote><p>也可以将 elasticsearch 添加为 windows 服务, 随系统启动</p><ul><li>在控制台执行 ealsticsearch-service install 命令即可</li><li>卸载服务命令 ealsticsearch-service remove</li><li>重启服务命令 ealsticsearch-service restart</li></ul></blockquote><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="安装-elasticsearch-head"><a href="#安装-elasticsearch-head" class="headerlink" title="安装 elasticsearch-head"></a>安装 elasticsearch-head</h2><p>Git 地址 <a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a>, 对于 Elasticsearch 5.x, elasticsearch-head 不再以插件的方式集成到 Elasticsearch 中, 而是作为独立的服务.</p><p>具体操作在项目的 ReadMe 文件中已经描述的很详细了, <a href="https://github.com/mobz/elasticsearch-head#running-with-built-in-server" target="_blank" rel="noopener">查看设置</a></p><p>设置完成后, 打开对应地址可以看到如下结果:<br><img src="/assets/elasticsearch/elasticsearch_head.png" alt><br>其中 index 和 db_news 是建立的索引</p><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><p>下载地址 <a href="https://www.elastic.co/products" target="_blank" rel="noopener">https://www.elastic.co/products</a></p><blockquote><p>版本要与 elasticsearch 版本对应</p></blockquote><ul><li>解压 zip 文件. 开启 elasticsearch 服务后</li><li>进入相应 bin 目录, 运行 kibana</li><li>访问 localhost://5601 即可</li></ul><h2 id="安装-elasticsearch-analysis-ik"><a href="#安装-elasticsearch-analysis-ik" class="headerlink" title="安装 elasticsearch-analysis-ik"></a>安装 elasticsearch-analysis-ik</h2><p>Git 地址 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">elasticsearch-analysis-ik</a></p><blockquote><p>版本要与 elasticsearch 版本对应</p></blockquote><ul><li>在 Elasticsearch 根目录中 plugins 下新建 ik 文件夹</li><li>根据对应关系, 选择下载 v5.x.x 的 Release zip 文件(当然也可以下载源码, 自己编译)<br>  <img src="/assets/elasticsearch/ik_version.png" alt></li><li>将 zip 解压到新建立的 ik 文件夹下<br>  <img src="/assets/elasticsearch/ik_detail.png" alt></li></ul><h2 id="安装-elasticsearch-analysis-pinyin"><a href="#安装-elasticsearch-analysis-pinyin" class="headerlink" title="安装 elasticsearch-analysis-pinyin"></a>安装 elasticsearch-analysis-pinyin</h2><p>Git 地址 <a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="noopener">elasticsearch-analysis-pinyin</a></p><blockquote><p>版本要与 elasticsearch 版本对应</p></blockquote><ul><li>在 Elasticsearch 根目录中 plugins 下新建 pinyin 文件夹</li><li>根据对应关系, 选择下载 v5.x.x 的 Release zip 文件(当然也可以下载源码, 自己编译)</li><li>将 zip 解压到新建立的 pinyin 文件夹下</li></ul><p>安装完成后, 重启 Elasticsearch 服务就可以使用了.</p><h2 id="使用-Maven-打包-elasticsearch-analysis-ik-和-elasticsearch-analysis-pinyin"><a href="#使用-Maven-打包-elasticsearch-analysis-ik-和-elasticsearch-analysis-pinyin" class="headerlink" title="使用 Maven 打包 elasticsearch-analysis-ik 和 elasticsearch-analysis-pinyin"></a>使用 Maven 打包 elasticsearch-analysis-ik 和 elasticsearch-analysis-pinyin</h2><p>有时候在 github 上不能直接下载 release 包, 我们就需要 Maven 来处理</p><p>下载最新版 Maven: <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><ul><li>解压</li><li>配置环境变量 (路径\bin)</li><li>测试 (mvn -v)</li><li>进入已经下载的 <code>elasticsearch-analysis-ik</code> 文件夹下</li><li>运行 mvn package</li><li>结束后复制 target/releases//elasticsearch-analysis-ik-{version}.zip 即可<blockquote><p>elasticsearch-analysis-pinyin 操作相同</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch 5.x.x 在 Windows 下安装配置</title>
      <link href="/2017/01/18/elasticsearch-windows-5.1.1/"/>
      <url>/2017/01/18/elasticsearch-windows-5.1.1/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>关于 Elasticsearch 的介绍可以查看 <a href="https://www.gitbook.com/book/fuxiaopang/learnelasticsearch/details" target="_blank" rel="noopener">Elasticsearch 权威指南</a>, 讲解的非常详细.</p><p>本文主要讲解, Elasticsearch 5.x.x 版本在 Windows 环境下的安装和中文分词插件配置</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>由于 Elasticsearch 是基于 Lucene 的, 所以要依赖 Java 环境</p><ul><li><p>安装最新版 JAVA, 由 <a href="http://www.java.com/" target="_blank" rel="noopener">www.java.com</a> 下载</p><p>  安装目录示例: <code>C:\Program Files\Java</code></p></li></ul><a id="more"></a>    <ul><li><p>配置 JAVA 环境变量</p><p>  新建系统变量 JAVA_HOME, 指向 JAVA 安装路径<br>  <img src="/assets/elasticsearch/java_home.png" alt><br>  编辑系统变量中 Path ,新增 <code>%JAVA_HOME%\bin</code> 或 <code>%JAVA_HOME%\jre\bin</code><br>  <img src="/assets/elasticsearch/path_java_home.png" alt></p></li><li><p>下载 Elasticsearch 5.x.x 版本 zip 包, 可由 <a href="http://www.elasticsearch.org/download/" target="_blank" rel="noopener">elasticsearch.org/download</a> 下载, 解压到相应目录<br>  <img src="/assets/elasticsearch/elasticsearch511.png" alt></p></li><li><p>现在可直接在控制台运行 elasticsearch.bat, 就已经启动了 elasticsearch 服务, 可在浏览器中输入 localhost:9200 查看状态<br>  <img src="/assets/elasticsearch/9200status.png" alt></p></li></ul><blockquote><p>也可以将 elasticsearch 添加为 windows 服务, 随系统启动</p><ul><li>在控制台执行 ealsticsearch-service install 命令即可</li><li>卸载服务命令 ealsticsearch-service remove</li><li>重启服务命令 ealsticsearch-service restart</li></ul></blockquote><h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><h2 id="安装-elasticsearch-head"><a href="#安装-elasticsearch-head" class="headerlink" title="安装 elasticsearch-head"></a>安装 elasticsearch-head</h2><p>Git 地址 <a href="https://github.com/mobz/elasticsearch-head" target="_blank" rel="noopener">elasticsearch-head</a>, 对于 Elasticsearch 5.x, elasticsearch-head 不再以插件的方式集成到 Elasticsearch 中, 而是作为独立的服务.</p><p>具体操作在项目的 ReadMe 文件中已经描述的很详细了, <a href="https://github.com/mobz/elasticsearch-head#running-with-built-in-server" target="_blank" rel="noopener">查看设置</a></p><p>设置完成后, 打开对应地址可以看到如下结果:<br><img src="/assets/elasticsearch/elasticsearch_head.png" alt><br>其中 index 和 db_news 是建立的索引</p><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><p>下载地址 <a href="https://www.elastic.co/products" target="_blank" rel="noopener">https://www.elastic.co/products</a></p><blockquote><p>版本要与 elasticsearch 版本对应</p></blockquote><ul><li>解压 zip 文件. 开启 elasticsearch 服务后</li><li>进入相应 bin 目录, 运行 kibana</li><li>访问 localhost://5601 即可</li></ul><h2 id="安装-elasticsearch-analysis-ik"><a href="#安装-elasticsearch-analysis-ik" class="headerlink" title="安装 elasticsearch-analysis-ik"></a>安装 elasticsearch-analysis-ik</h2><p>Git 地址 <a href="https://github.com/medcl/elasticsearch-analysis-ik" target="_blank" rel="noopener">elasticsearch-analysis-ik</a></p><blockquote><p>版本要与 elasticsearch 版本对应</p></blockquote><ul><li>在 Elasticsearch 根目录中 plugins 下新建 ik 文件夹</li><li>根据对应关系, 选择下载 v5.x.x 的 Release zip 文件(当然也可以下载源码, 自己编译)<br>  <img src="/assets/elasticsearch/ik_version.png" alt></li><li>将 zip 解压到新建立的 ik 文件夹下<br>  <img src="/assets/elasticsearch/ik_detail.png" alt></li></ul><h2 id="安装-elasticsearch-analysis-pinyin"><a href="#安装-elasticsearch-analysis-pinyin" class="headerlink" title="安装 elasticsearch-analysis-pinyin"></a>安装 elasticsearch-analysis-pinyin</h2><p>Git 地址 <a href="https://github.com/medcl/elasticsearch-analysis-pinyin" target="_blank" rel="noopener">elasticsearch-analysis-pinyin</a></p><blockquote><p>版本要与 elasticsearch 版本对应</p></blockquote><ul><li>在 Elasticsearch 根目录中 plugins 下新建 pinyin 文件夹</li><li>根据对应关系, 选择下载 v5.x.x 的 Release zip 文件(当然也可以下载源码, 自己编译)</li><li>将 zip 解压到新建立的 pinyin 文件夹下</li></ul><p>安装完成后, 重启 Elasticsearch 服务就可以使用了.</p><h2 id="使用-Maven-打包-elasticsearch-analysis-ik-和-elasticsearch-analysis-pinyin"><a href="#使用-Maven-打包-elasticsearch-analysis-ik-和-elasticsearch-analysis-pinyin" class="headerlink" title="使用 Maven 打包 elasticsearch-analysis-ik 和 elasticsearch-analysis-pinyin"></a>使用 Maven 打包 elasticsearch-analysis-ik 和 elasticsearch-analysis-pinyin</h2><p>有时候在 github 上不能直接下载 release 包, 我们就需要 Maven 来处理</p><p>下载最新版 Maven: <a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><ul><li>解压</li><li>配置环境变量 (路径\bin)</li><li>测试 (mvn -v)</li><li>进入已经下载的 <code>elasticsearch-analysis-ik</code> 文件夹下</li><li>运行 mvn package</li><li>结束后复制 target/releases//elasticsearch-analysis-ik-{version}.zip 即可<blockquote><p>elasticsearch-analysis-pinyin 操作相同</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET MVC 源码控制里保持私有设置的 web.config 或 app.config</title>
      <link href="/2016/12/07/keep_private_setting_out_of_source_control/"/>
      <url>/2016/12/07/keep_private_setting_out_of_source_control/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原英文博客地址: <a href="http://johnatten.com/2014/04/06/asp-net-mvc-keep-private-settings-out-of-source-control/#Use-configSource-Attribute-to-move-an-Entire-Configuration-Section-to-Its-Own-File" target="_blank" rel="noopener">ASP.NET MVC: Keep Private Settings Out of Source Control</a></p></blockquote><p>在使用 git 管理 ASP.NET MVC 代码时, 当别人意外 push 了自己修改过的 web.config 或 app.config 文件, 我们每次在 pull 时总要修改数据库连接字符串或者一些其他私有设置. 很麻烦</p><p>现有以下解决方式:</p><ul><li><a href="#use-configSource-attr">使用 configSource Attribute 把整体配置部分移动到单独的文件中</a></li><li><a href="#use-file-attr">使用 File Attribute 有选择的移动 Application Settings (appSettings 标签下的设置) 到外部文件</a></li><li><a href="#add-ignore">在 .gitignore 中添加特殊文件</a></li><li><a href="#document-is-key">Documentation is Key</a></li></ul><a id="more"></a><p>以 ASP.NET Web.config 文件为例:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  A bunch of ASP.NET MVC web config stuff goes here . . . </span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"DefaultConnection"</span> <span class="attr">value</span>=<span class="string">"YourConnectionStringAndPassword"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">appSettings</span> <span class="attr">file</span>=<span class="string">"PrivateSettings.config"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"owin:AppStartup"</span> <span class="attr">value</span>=<span class="string">"AspNetIdentity2ExtendingApplicationUser.Startup,AspNetIdentity2ExtendingApplicationUser"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"webpages:Version"</span> <span class="attr">value</span>=<span class="string">"3.0.0.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"webpages:Enabled"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"ClientValidationEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"UnobtrusiveJavaScriptEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"EMAIL_PASSWORD"</span> <span class="attr">value</span>=<span class="string">"YourEmailPassword"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于不同开发人员可能有不同的数据库连接字符串配置, 根据 .NET <code>ConfigurationManager</code> 提供了解决的方案. </p><p><span id="use-configSource-attr"></span></p><h2 id="使用-configSource-Attribute-把整体配置部分移动到单独的文件中"><a href="#使用-configSource-Attribute-把整体配置部分移动到单独的文件中" class="headerlink" title="使用 configSource Attribute 把整体配置部分移动到单独的文件中"></a>使用 configSource Attribute 把整体配置部分移动到单独的文件中</h2><p>我们可以添加单独的配置文件 ConnectionStrings.config, 并且在 Web.config 文件中的 <code>configSource</code> 特性中使用它.</p><ul><li><p>新建 ConnectionStrings.config 文件</p></li><li><p>把先面的内容添加到 ConnectionStrings.config 中 (不需要 xml 头声明, 只有 <code>connectionStrings</code> 标签, 然后在标签里添加 <code>&lt;add&gt;</code> 元素)</p><p>  <strong>ConnectionStrings.config 文件例子:</strong> <label style="color: red;">这里面的 &lt;connectionStrings&gt; 中不要添加 configSource 标签, 否则报错 </label></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">"DefaultConnection"</span> <span class="attr">value</span>=<span class="string">"YourConnectionStringAndPassword"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>修改 Web.config 文件, 移除 <strong><connectionstrings></connectionstrings></strong> 下面的 <strong><add></add></strong> 元素, 在 <strong><connectionstrings></connectionstrings></strong> 便签中添加 <code>configSource</code> 特性, 值为新创建的文件 (ConnectionStrings.config)</p><p>  <strong>例子:</strong></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">connectionStrings</span> <span class="attr">configSource</span>=<span class="string">"ConnectionStrings.config"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">connectionStrings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>右键文件选择属性, 设置 <strong>Copy to Output Directory</strong> 为 <code>Copy if newer</code> 或者 <code>Copy always</code>.</p></li></ul><p><strong>同以前访问连接字符串方式相同, 可直接使用如下代码访问:</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> conn = ConfigurationManager.ConnectionStrings[<span class="string">"DefaultConnection"</span>];</span><br><span class="line"><span class="keyword">string</span> connString = conn.ConnectionString;</span><br><span class="line"><span class="comment">// Etc...</span></span><br></pre></td></tr></table></figure><p><span id="use-file-attr"></span></p><h2 id="使用-File-Attribute-有选择的移动-Application-Settings-appSettings-标签下的设置-到外部文件"><a href="#使用-File-Attribute-有选择的移动-Application-Settings-appSettings-标签下的设置-到外部文件" class="headerlink" title="使用 File Attribute 有选择的移动 Application Settings (appSettings 标签下的设置) 到外部文件"></a>使用 File Attribute 有选择的移动 Application Settings (appSettings 标签下的设置) 到外部文件</h2><p>在 <code>&lt;appSettings&gt;</code> 标签里可以配置许多全局值供项目使用, 但有很多不需要提交到源码控制中 (如: 邮箱密码配置).<br>这种情况下, <code>&lt;appSettings&gt;</code> 标签里有一个特殊的 <code>file</code> 特性, 允许将一些配置放到独立的文件中.</p><ul><li><p>添加新的文件 <em>PrivateSettings.config</em>, 也不带 XML 头, 只包含 <code>&lt;appSettings&gt;</code> 标签和其里面的内容</p><p>  <strong>PrivateSettings.config文件:</strong></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"MAIL_PASSWORD"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>移除 Web.config 中 <code>&lt;appSettings&gt;</code> 标签里要变为私有的内容, 并且添加 <code>file</code> 特性, 值为 <em>PrivateSettings.config</em></p><p><strong>修改后的 Web.config 文件:</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">appSettings</span> <span class="attr">file</span>=<span class="string">"PrivateSettings.config"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"owin:AppStartup"</span> <span class="attr">value</span>=<span class="string">"AspNetIdentity2ExtendingApplicationUser.Startup,AspNetIdentity2ExtendingApplicationUser"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"webpages:Version"</span> <span class="attr">value</span>=<span class="string">"3.0.0.0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"webpages:Enabled"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"ClientValidationEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">add</span> <span class="attr">key</span>=<span class="string">"UnobtrusiveJavaScriptEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">appSettings</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>右键文件选择属性, 设置 <strong>Copy to Output Directory</strong> 为 <code>Copy if newer</code> 或者 <code>Copy always</code>.</p></li></ul><p><strong>在项目中也可以直接使用如下代码来访问:</strong><br>  <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pwd = ConfigurationManager.AppSettings[<span class="string">"MAIL_PASSWORD"</span>];</span><br></pre></td></tr></table></figure></p><p><span id="add-ignore"></span></p><h2 id="在-gitignore-中添加特殊文件"><a href="#在-gitignore-中添加特殊文件" class="headerlink" title="在 .gitignore 中添加特殊文件"></a>在 .gitignore 中添加特殊文件</h2><p>Now we can add our Web.config file to source and commit, and add the two special files, ConnectionStrings.config and PrivateSettings.config to our .gitignore file, and commit away. When it’s time to push to a shared repo, our private information will stay private.</p><p><span id="document-is-key"></span></p><h2 id="Documentation-is-Key"><a href="#Documentation-is-Key" class="headerlink" title="Documentation is Key"></a>Documentation is Key</h2><p>Of course, when we take this type of approach, it will be helpful to other developers if our documentation clearly indicates what is going on here. We might do this in our project README file, and/or add some XML comments at each point in our modified Web.config informing others that they will need to add the proper files to their local version of the project, and what those files should contain.</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ASP.NET MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程模式</title>
      <link href="/2016/12/07/event-based_asynchronous_pattern/"/>
      <url>/2016/12/07/event-based_asynchronous_pattern/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> .net </tag>
            
            <tag> event-based </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Asynchronous Programming Model (APM)</title>
      <link href="/2016/12/06/asynchronous_programming_model/"/>
      <url>/2016/12/06/asynchronous_programming_model/</url>
      
        <content type="html"><![CDATA[<p>也称为 IAsyncResult 模式, 异步操作需要使用 Begin<em>OperationName</em> 和 End<em>OperationName</em> 方法. (例如, FileStream类提供了BeginRead 和 EndRead (Read方法的异步版本) 方法来异步读取字节).</p><blockquote><p>从 .NET Framework 4.0 开始, 任务并行库为异步和并行编程提供了新的模式. 详见: <a href="https://msdn.microsoft.com/zh-cn/library/dd460717(v=vs.110).aspx" target="_blank" rel="noopener">Task Parallel Libary (TPL)</a> 和 <a href="https://msdn.microsoft.com/zh-cn/library/hh873175(v=vs.110).aspx" target="_blank" rel="noopener">Task-based Asynchronous Pattern (TAP)</a><br>因此, 不再建议使用此种模式.</p></blockquote><a id="more"></a><p>在调用完 <strong>Begin*</strong>OperationName* 后, 应用程序可以继续在调用线程上执行其他操作, 同时异步操作在另外一个线程上执行. 每次调用 <strong>Begin*</strong>OperationName* 时, 应用程序还应调用 <strong>End*</strong>OperationName* 来获取操作的结果.</p><h2 id="开始一个异步操作"><a href="#开始一个异步操作" class="headerlink" title="开始一个异步操作"></a>开始一个异步操作</h2><p><strong>Begin*</strong>OperationName* 方法开始异步操作 <em>OperationName</em>, 并返回实现 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult(v=vs.110).aspx" target="_blank" rel="noopener">IAsyncResult</a> 接口的对象. <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult(v=vs.110).aspx" target="_blank" rel="noopener">IAsyncResult</a>存储有关异步操作信息. 异步操作信息如下:</p><table><thead><tr><th>Member</th><th align="center">Description</th></tr></thead><tbody><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.asyncstate(v=vs.110).aspx" target="_blank" rel="noopener">AsyncState</a></td><td align="center">一个特定于应用程序的可选对象, 其中包含有关异步操作的信息</td></tr><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.asyncwaithandle(v=vs.110).aspx" target="_blank" rel="noopener">AsyncWaitHandle</a></td><td align="center">一个 <a href="https://msdn.microsoft.com/zh-cn/library/system.threading.waithandle(v=vs.110).aspx" target="_blank" rel="noopener">WaitHandle</a>, 可用来在异步操作完成之前阻止应用程序执行</td></tr><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.completedsynchronously(v=vs.110).aspx" target="_blank" rel="noopener">CompletedSynchronously</a></td><td align="center">指示异步操作是否是在用于调用 <strong>Begin*</strong>OperationName* 的线程上完成, 而不是在单独的 ThreadPool 线程上完成</td></tr><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.iscompleted(v=vs.110).aspx" target="_blank" rel="noopener">IsCompleted</a></td><td align="center">指示异步操作是否完成</td></tr></tbody></table><p><strong>Begin*</strong>OperationName* 方法使用该方法同步版本签名中通过值或引用传递的任何参数. 并且不包含任何输出参数. <strong>Begin*</strong>OperationName* 方法签名还包含两个附加参数. </p><ul><li>第一个参数定义了一个 <a href="https://msdn.microsoft.com/zh-cn/library/system.asynccallback(v=vs.110).aspx" target="_blank" rel="noopener">AsyncCallback</a> 委托, 当异步操作完成时调用委托所引用的方法. 操作完成时, 如果不想调用任何方法, 可以指定为 null.</li><li>第二个参数是用户自定义对象, 此对象可用来向异步操作完成时调用的方法传递应用程序特定的状态信息.</li></ul><p>如果 <strong>Begin*</strong>OperationName* 方法还采用其他一些操作特定的参数 (例如, 一个用于存储从文件读取的字节的字节数组), 则 <a href="https://msdn.microsoft.com/zh-cn/library/system.asynccallback(v=vs.110).aspx" target="_blank" rel="noopener">AsyncCallback</a> 和应用程序状态对象将是 <strong>Begin*</strong>OperationName* 方法签名中的最后两个参数</p><p><strong>Begin*</strong>OperationName* 立即返回对调用线程 (主线程) 的控制. 如果 <strong>Begin*</strong>OperationName* 方法抛出异常, 则会在开始异步操作之前抛出异常, 并且不会调用回调方法.</p><h2 id="结束异步操作"><a href="#结束异步操作" class="headerlink" title="结束异步操作"></a>结束异步操作</h2><p><strong>End*</strong>OperationName* 方法可结束异步操作 <em>OperationName</em>. <strong>End*</strong>OperationName* 方法的返回值与其同步对应方法的返回值类型相同, 并且是特定于异步操作的. 例如, EndRead 方法返回从 <a href="https://msdn.microsoft.com/zh-cn/library/system.io.filestream(v=vs.110).aspx" target="_blank" rel="noopener">FileStream</a> 读取的字节数, <a href="https://msdn.microsoft.com/zh-cn/library/system.net.dns.endgethostbyname(v=vs.110).aspx" target="_blank" rel="noopener">EndGetHostByName</a> 方法返回包含有关主机的信息的 <a href="https://msdn.microsoft.com/zh-cn/library/system.net.iphostentry(v=vs.110).aspx" target="_blank" rel="noopener">IPHostEntry</a> 对象. <strong>End*</strong>OperationName* 方法采用该方法同步版本的签名中声明的所有输出参数或引用参数. 除了来自同步方法的参数外, <strong>End*</strong>OperationName* 方法还包括 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult(v=vs.110).aspx" target="_blank" rel="noopener">IAsyncResult</a> 参数. 调用方必须将对应调用返回的实例传递给 BeginOperationName.<br>如果调用 <strong>End*</strong>OperationName* 时 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult(v=vs.110).aspx" target="_blank" rel="noopener">IAsyncResult</a> 对象表示的异步操作尚未完成, 则 <strong>End*</strong>OperationName* 将在异步操作完成之前阻止调用线程. 异步操作引发的异常是从 <strong>End*</strong>OperationName* 方法引发的. 未定义多次使用同一 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult(v=vs.110).aspx" target="_blank" rel="noopener">IAsyncResult</a> 调用 <strong>End*</strong>OperationName* 方法的效果. 同样, 也未定义使用不是相关 Begin 方法返回的 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult(v=vs.110).aspx" target="_blank" rel="noopener">IAsyncResult</a> 调用 <strong>End*</strong>OperationName* 方法的效果. </p><blockquote><p>对于这两种未定义的情况, 实施者应考虑引发 <a href="https://msdn.microsoft.com/zh-cn/library/system.invalidoperationexception(v=vs.110).aspx" target="_blank" rel="noopener">InvalidOperationException</a>. </p></blockquote><blockquote><p>此设计模式的实施者应通知调用方异步操作已通过以下步骤完成: 将 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.iscompleted(v=vs.110).aspx" target="_blank" rel="noopener">IsCompleted</a> 设置为 true, 调用异步回调方法 ( 如果已指定一个回调方法 ), 然后发送 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.asyncwaithandle(v=vs.110).aspx" target="_blank" rel="noopener">AsyncWaitHandle</a> 信号. </p></blockquote><p>对于访问异步操作的结果, 应用程序开发人员有若干种设计选择. 正确的选择取决于应用程序是否有可以在操作完成时执行的指令. 如果应用程序在接收到异步操作结果之前不能进行任何其他工作, 则必须在获得这些结果之前先阻止该应用程序进行其他工作. 若要在异步操作完成之前阻止应用程序, 可以使用下列方法之一: </p><ul><li>从应用程序的主线程调用 <strong>End*</strong>OperationName*, 阻止应用程序执行, 直到操作完成. 有关演示此方法的示例, 请参阅<a href="https://msdn.microsoft.com/zh-cn/library/ms228967(v=vs.110).aspx" target="_blank" rel="noopener">Blocking Application Execution by Ending an Async Operation</a>. </li><li>使用 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.asyncwaithandle(v=vs.110).aspx" target="_blank" rel="noopener">AsyncWaitHandle</a> 来阻止应用程序执行, 直到一个或多个操作完成. 有关演示此方法的示例, 请参阅<a href="https://msdn.microsoft.com/zh-cn/library/ms228962(v=vs.110).aspx" target="_blank" rel="noopener">Blocking Application Execution Using an AsyncWaitHandle</a>. </li></ul><p>在异步操作完成时不需要阻止的应用程序可使用下列方法之一: </p><ul><li>按以下方式轮询操作完成状态: 定期检查 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult.iscompleted(v=vs.110).aspx" target="_blank" rel="noopener">IsCompleted</a> 属性, 并在操作完成后调用 <strong>End*</strong>OperationName*. 有关演示此方法的示例, 请参阅<a href="https://msdn.microsoft.com/zh-cn/library/ms228968(v=vs.110).aspx" target="_blank" rel="noopener">Polling for the Status of an Asynchronous Operation</a>. </li><li>使用 <a href="https://msdn.microsoft.com/zh-cn/library/system.asynccallback(v=vs.110).aspx" target="_blank" rel="noopener">AsyncCallback</a> 委托来指定要在操作完成时调用的方法. 有关演示此方法的示例, 请参阅<a href="https://msdn.microsoft.com/zh-cn/library/ms228972(v=vs.110).aspx" target="_blank" rel="noopener">Using an AsyncCallback Delegate to End an Asynchronous Operation</a>. </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> .net </tag>
            
            <tag> IAsyncResult </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步编程模式</title>
      <link href="/2016/12/05/asynchronous_program_in_dotnet/"/>
      <url>/2016/12/05/asynchronous_program_in_dotnet/</url>
      
        <content type="html"><![CDATA[<h2 id="三种异步编程模式"><a href="#三种异步编程模式" class="headerlink" title="三种异步编程模式"></a>三种异步编程模式</h2><p>.NET Framework 提供了三种异步编程模式:</p><ul><li>APM (Asynchronous Programming Model): 异步编程模型</li><li>EAP (Event-based Asynchronous Pattern): 基于事件的异步模式</li><li>TAP (Tasks-based Asynchronous Pattern): 基于任务的异步模式</li></ul><a id="more"></a><h3 id="异步编程模式-APM"><a href="#异步编程模式-APM" class="headerlink" title="异步编程模式 ( APM )"></a>异步编程模式 ( APM )</h3><p>也称为 IAsyncResult 模式, 异步操作需要使用 Begin<em>OperationName</em> 和 End<em>OperationName</em> 方法. (例如, FileStream类提供了BeginRead 和 EndRead (Read方法的异步版本) 方法来异步读取字节).</p><blockquote><p>从 .NET Framework 4.0 开始, 任务并行库为异步和并行编程提供了新的模式, 因此不再建议使用此种模式. 详见: <a href="https://msdn.microsoft.com/zh-cn/library/dd460717(v=vs.110).aspx" target="_blank" rel="noopener">Task Parallel Libary (TPL)</a> 和 <a href="https://msdn.microsoft.com/zh-cn/library/hh873175(v=vs.110).aspx" target="_blank" rel="noopener">Task-based Asynchronous Pattern (TAP)</a> 以及 <a href="https://msdn.microsoft.com/zh-cn/library/ms228963(v=vs.110).aspx" target="_blank" rel="noopener">Asynchronous Programming Model (APM)</a></p></blockquote><h3 id="基于事件异步编程模式-EAP"><a href="#基于事件异步编程模式-EAP" class="headerlink" title="基于事件异步编程模式 ( EAP )"></a>基于事件异步编程模式 ( EAP )</h3><p>这种模式需要 Async 后缀, 也需要一个或多个事件、事件处理程序委托类型和 <strong>EventArg</strong> 派生类型. EAP 是在 .NET Framework 2.0 中引入的. 对于新的开发工作不再建议采用此模式. 有关详细信息, 请参阅<a href="https://msdn.microsoft.com/zh-cn/library/ms228969(v=vs.110).aspx" target="_blank" rel="noopener">Event-based Asynchronous Pattern (EAP)</a>. </p><h3 id="基于任务异步编程模式-TAP"><a href="#基于任务异步编程模式-TAP" class="headerlink" title="基于任务异步编程模式 ( TAP )"></a>基于任务异步编程模式 ( TAP )</h3><p>使用一种方法来表示异步操作的启动和完成<br>TAP 是在 .NET Framework 4 中引入的, 并且它是在 .NET Framework 中进行异步编程的推荐使用方法. C# 中的 <a href="https://msdn.microsoft.com/zh-cn/library/hh156513(v=vs.110).aspx" target="_blank" rel="noopener">async</a> 和 <a href="https://msdn.microsoft.com/zh-cn/library/hh156528(v=vs.110).aspx" target="_blank" rel="noopener">await</a> 关键词为 TAP 添加了语言支持. 有关详细信息, 请参阅<a href="https://msdn.microsoft.com/zh-cn/library/hh873175(v=vs.110).aspx" target="_blank" rel="noopener">Task-based Asynchronous Pattern (TAP)</a>. </p><h2 id="比较三种异步模式"><a href="#比较三种异步模式" class="headerlink" title="比较三种异步模式"></a>比较三种异步模式</h2><p>为了快速比较这三种模式的异步操作方式，使用从指定偏移量处起将指定量数据读取到提供的缓冲区中的 <strong>Read</strong> 方法: </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Read</span>(<span class="params"><span class="keyword">byte</span> [] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> count</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>此方法对应的 APM 将公开 BeginRead 和 EndRead 方法:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IAsyncResult <span class="title">BeginRead</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">byte</span> [] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> count, </span></span></span><br><span class="line"><span class="function"><span class="params">        AsyncCallback callback, <span class="keyword">object</span> state</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">EndRead</span>(<span class="params">IAsyncResult asyncResult</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对应的 EAP 将公开以下类型和成员的集</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReadAsync</span>(<span class="params"><span class="keyword">byte</span> [] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> count</span>)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> ReadCompletedEventHandler ReadCompleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对应的 TAP 将公开以下单个 ReadAsync 方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">ReadAsync</span>(<span class="params"><span class="keyword">byte</span> [] buffer, <span class="keyword">int</span> offset, <span class="keyword">int</span> count</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a>相关连接</h2><table><thead><tr><th>标题</th><th align="center">描述</th></tr></thead><tbody><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/ms228963(v=vs.110).aspx" target="_blank" rel="noopener">Asynchronous Programming Model (APM)</a></td><td align="center">描述使用 <a href="https://msdn.microsoft.com/zh-cn/library/system.iasyncresult(v=vs.110).aspx" target="_blank" rel="noopener">IAsyncResult</a> 接口提供异步行为的旧模型。 对于新的开发工作不再建议采用此模型</td></tr><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/ms228969(v=vs.110).aspx" target="_blank" rel="noopener">Event-based Asynchronous Pattern (EAP)</a></td><td align="center">描述提供异步行为的基于事件的旧模型。 对于新的开发工作不再建议采用此模型</td></tr><tr><td><a href="https://msdn.microsoft.com/zh-cn/library/hh873175(v=vs.110).aspx" target="_blank" rel="noopener">Task-based Asynchronous Pattern (TAP)</a></td><td align="center">描述基于 <a href="https://msdn.microsoft.com/zh-cn/library/system.threading.tasks(v=vs.110).aspx" target="_blank" rel="noopener">System.Threading.Tasks</a> 命名空间的新异步模式。 此模型是在 .NET Framework 4 及更高版本中进行异步编程的推荐使用方法</td></tr></tbody></table><h2 id="涉及的多线程概念"><a href="#涉及的多线程概念" class="headerlink" title="涉及的多线程概念"></a>涉及的多线程概念</h2><ul><li>锁</li><li>死锁</li><li>征用条件</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> async </tag>
            
            <tag> .net </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>app.Use vs app.Run in ASP.NET Core middleware</title>
      <link href="/2016/12/02/app.Use-vs-app.Run/"/>
      <url>/2016/12/02/app.Use-vs-app.Run/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接: <a href="http://www.talkingdotnet.com/app-use-vs-app-run-asp-net-core-middleware/" target="_blank" rel="noopener">app.Use vs app.Run in ASP.NET Core middleware</a></p></blockquote><p><strong>app.Run</strong> 和 <strong>app.Use</strong> 都应用于中间件, 到底有什么不同过呢?</p><h2 id="00-00-不同之处"><a href="#00-00-不同之处" class="headerlink" title="00.00 不同之处"></a>00.00 不同之处</h2><p>在 ASP.NET Core 中, 中间件是按照添加顺序执行的. 使用 <strong>app.Use</strong> 定义的中间件可能会调用下一个中间件组件.<br>而使用 <strong>app.Run</strong> 定义的中间件, 永远不会调用后续的中间件</p><h2 id="00-01-从代码看"><a href="#00-01-从代码看" class="headerlink" title="00.01 从代码看"></a>00.01 从代码看</h2><p>创建一个新的 ASP.NET Core 1.0 Mvc 应用, 并将 Startup 类中 Configure 方法的内容改为如下.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"&lt;html&gt;&lt;body&gt;"</span>);</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"&lt;div&gt;Inside middleware defined using app.Use&lt;/div&gt;"</span>);</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.Run(<span class="keyword">async</span> context =&gt; &#123; </span><br><span class="line">       <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"&lt;div&gt;Inside middleware defined using app.Run&lt;/div&gt;"</span>); </span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"&lt;html&gt;&lt;body&gt;"</span>);</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"&lt;div&gt;Another Middleware defined using app.Use&lt;/div&gt;"</span>);</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    app.UseIISPlatformHandler(options =&gt; options.AuthenticationDescriptions.Clear());</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">    app.UseIdentity();</span><br><span class="line">    app.UseMvc(routes =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        routes.MapRoute(</span><br><span class="line">            name: <span class="string">"default"</span>,</span><br><span class="line">            template: <span class="string">"&#123;controller=Home&#125;/&#123;action=Index&#125;/&#123;id?&#125;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例使用 <strong>app.Use</strong> 定义了 2 个内联中间件，使用 <strong>app.Run</strong> 定义了 1 个内联中间件. </p><p>使用 <strong>app.Use</strong> 定义的第一个中间件将异步写入响应对象的HTML, 调用下一个中间件，再次写入关闭HTML. 而使用 <strong>app.Run</strong> 定义的中间件写入消息，然后返回.</p><p>在 <strong>app.Run</strong> 中间件之后，我们使用 <strong>app.Use</strong> 定义了另一个内联中间件，并且还使用了一些内置的中间件</p><h2 id="00-02-运行结果"><a href="#00-02-运行结果" class="headerlink" title="00.02 运行结果"></a>00.02 运行结果</h2><p>运行应用程序时的输出结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Inside middleware defined using app.Use</span><br><span class="line">Inside middleware defined using app.Run</span><br></pre></td></tr></table></figure><p>如之前描述, 定义在 <strong>app.Run</strong> 之后的中间件不会被执行. 这就是为什么第二个使用 <strong>app.Use</strong> 定义的中间件没有响应的原因.</p>]]></content>
      
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C# 语法糖</title>
      <link href="/2016/12/02/csharp-syntax/"/>
      <url>/2016/12/02/csharp-syntax/</url>
      
        <content type="html"><![CDATA[<h2 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h2><table><thead><tr><th>符号</th><th align="center">说明</th></tr></thead><tbody><tr><td><strong>??</strong></td><td align="center">非空取前者值, 空取后者值</td></tr><tr><td><strong>?.</strong></td><td align="center"></td></tr></tbody></table><h3 id="0-0-示例"><a href="#0-0-示例" class="headerlink" title="0.0 示例 ??"></a>0.0 示例 <strong>??</strong></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = GetValue() ?? <span class="string">"test"</span>;</span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = GetValue();</span><br><span class="line"><span class="keyword">if</span>(str == <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    str = <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="0-1-示例"><a href="#0-1-示例" class="headerlink" title="0.1 示例 ?."></a>0.1 示例 <strong>?.</strong></h3>]]></content>
      
      
      <categories>
          
          <category> dotnet </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Yarn 基本使用</title>
      <link href="/2016/12/02/yarn_basic_use/"/>
      <url>/2016/12/02/yarn_basic_use/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Yarn 官网: <a href="https://yarnpkg.com" target="_blank" rel="noopener">https://yarnpkg.com</a></p></blockquote><h2 id="Yarn-简介"><a href="#Yarn-简介" class="headerlink" title="Yarn 简介"></a>Yarn 简介</h2><p>Yarn 可以作为类似 npm 的包管理工具, 相比 npm 速度更快</p><a id="more"></a><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure><p>输入一些基本参数后, 会在目录下生成 project.json 文件</p><h3 id="添加依赖项"><a href="#添加依赖项" class="headerlink" title="添加依赖项"></a><strong>添加依赖项</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure><p>也可以使用开源项目的地址, 如 jquery-confirm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add https://github.com/craftpip/jquery-confirm.git</span><br></pre></td></tr></table></figure><h3 id="升级依赖项"><a href="#升级依赖项" class="headerlink" title="升级依赖项"></a><strong>升级依赖项</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure><h3 id="移除依赖项"><a href="#移除依赖项" class="headerlink" title="移除依赖项"></a><strong>移除依赖项</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure><h3 id="安装所有依赖项"><a href="#安装所有依赖项" class="headerlink" title="安装所有依赖项"></a><strong>安装所有依赖项</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure><blockquote><p>更多 CLI Introduction: <a href="https://yarnpkg.com/en/docs/cli/" target="_blank" rel="noopener">https://yarnpkg.com/en/docs/cli/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> yarn </tag>
            
            <tag> usage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关键字 readonly 和 const</title>
      <link href="/2016/11/29/readonly_const/"/>
      <url>/2016/11/29/readonly_const/</url>
      
        <content type="html"><![CDATA[<p>使用 readonly 修饰一个属性时, 只能在此类中声明时或者构造函数体里为其赋值</p><blockquote><p>readonly 关键字和 const 不同. 一个 const 属性只能在声明的时候初始化. 而 readonly 还可以在构造函数中初始化.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> readonly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Areas分离ASP.NET MVC项目</title>
      <link href="/2016/11/29/use_area_in_mvc/"/>
      <url>/2016/11/29/use_area_in_mvc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文地址: <a href="http://www.cnblogs.com/dingji/archive/2012/05/30/2506420.html" target="_blank" rel="noopener">http://www.cnblogs.com/dingji/archive/2012/05/30/2506420.html</a></p></blockquote><h2 id="使用Areas分离ASP-NET-MVC项目"><a href="#使用Areas分离ASP-NET-MVC项目" class="headerlink" title="使用Areas分离ASP.NET MVC项目"></a>使用Areas分离ASP.NET MVC项目</h2><p>随着项目规模的不断扩大, Controller 控制器也随之不断增多. 如果在 Controllers 文件夹下面有超过两位数, 即便采用良好的命名规范, 或者用子文件夹的形式区分不同功能的控制器, 还是会影响项目的可阅读性和可维护性. 因此, 在一些场景下, 如果能把与某功能相关的文件分离到一个独立的项目中是非常有用的. Asp.Net MVC 提供了 Areas(区域) 的概念达到这一目的.</p><a id="more"></a><h3 id="1-新建-Areas"><a href="#1-新建-Areas" class="headerlink" title="1. 新建 Areas"></a><strong>1. 新建 Areas</strong></h3><p>在 MVC 项目上右键新建 Areas, 输入名字, 如: Admin</p><p><img src="/assets/161129_usearea_01.png" alt></p><p>在Areas/Admin/Controllers文件夹下面新建HomeController并添加一个Index的方法和对应的View文件. 这里可以发现Areas的另一个好处：你可以在不同Areas下面添加相同名称的Controller. 当然, 如果你直接这么运行会得到一个错误：</p><p><img src="/assets/161129_error_02.png" alt></p><blockquote><p>这种情况需要修改一下AdminAreaRegistration.cs和Global.asax, 分别为路由加上命名空间限制：</p></blockquote><p><strong>/Areas/Admin/AdminAreaRegistration.cs</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">context.MapRoute(</span><br><span class="line">     &quot;Admin_default&quot;,</span><br><span class="line">     &quot;Admin/&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;,</span><br><span class="line">     new &#123; action = &quot;Index&quot;, id = UrlParameter.Optional &#125;,</span><br><span class="line">     new string[] &#123; &quot;[项目名称].Areas.Admin.Controllers&quot; &#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><p><strong>/Global.asax.cs 或者 RouteConfig.cs</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">routes.MapRoute(    //Default Route</span><br><span class="line">     &quot;Default&quot;, // Route name</span><br><span class="line">     &quot;&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;, // URL with parameters</span><br><span class="line">     new &#123; controller = &quot;Home&quot;, action = &quot;Index&quot;, id = UrlParameter.Optional &#125;, // Parameter defaults</span><br><span class="line">     new string[] &#123; &quot;[项目名称].Controllers&quot; &#125;</span><br><span class="line"> );</span><br></pre></td></tr></table></figure><h3 id="2-改进"><a href="#2-改进" class="headerlink" title="2. 改进"></a><strong>2. 改进</strong></h3><p>我们需要对现有项目进行一下改造：</p><ol><li><p>在解决方案上面新建一个MyMvcAreasDemo.Admin的MVC3项目, 并且删除Global.asax和Web.config两个文件</p></li><li><p>在根目录新建一个AdminAreaRegistration的类, 输入如下内容：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class AdminAreaRegistration : AreaRegistration</span><br><span class="line">&#123;</span><br><span class="line">    public override string AreaName</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;Admin&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public override void RegisterArea(AreaRegistrationContext context)</span><br><span class="line">    &#123;</span><br><span class="line">        context.MapRoute(</span><br><span class="line">            &quot;Admin_default&quot;,</span><br><span class="line">            &quot;Admin/&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;&quot;,</span><br><span class="line">            new &#123; action = &quot;Index&quot;, id = UrlParameter.Optional &#125;               </span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>删除MyMvcAreasDemo项目/Areas/Admin文件夹下面的AdminAreaRegistration.cs文件以及Controllers文件夹（包括HomeController）</p></li><li><p>在MyMvcAreasDemo.Admin项目的Controllers里面新建一个HomeController</p></li><li><p>记得保留MyMvcAreasDemo/Areas/Admin下面的Views, 并且在MyMvcAreasDemo项目里面引用MyMvcAreasDemo.Admin项目, 如图：</p></li></ol><p><img src="/assets/161129_update_03.png" alt></p><p>现在运行程序并访问/Admin/Home/Index可以发现Admin项目生效了. 这样, 我们可以将所有的与后台管理相关的Controller都放到这个新的项目中来. 但是很快你会发现, 一个新的“问题”又出现了：</p><p>当你在MyMvcAreasDemo.Admin里面的HomeController添加新的Action（例如List）, 然后习惯性在上面右键-“Add View”后, 你会发现新增的List.cshtml文件会出现在MyMvcAreasDemo.Admin/Views/Home下面, 然后当你访问/Admin/Home/List的时候浏览器会得到错误提示：”The view ‘List’ or its master was not found or no view engine supports the searched locations…”. 原来它只会在主程序MyMvcAreasDemo中的对应目录去寻找View. 这么一来, MVC框架提供给我们的脚手架功能就大打折扣, 当然你可以手动在MyMvcAreasDemo/Areas/Admin/Views中对应添加View, 或者在MyMvcAreasDemo.Admin项目中自动生成了View之后再拷贝过去. 有没有更好的办法呢？</p><h3 id="3-自动复制新生成的-View-到-Areas-的-View-文件夹下"><a href="#3-自动复制新生成的-View-到-Areas-的-View-文件夹下" class="headerlink" title="3. 自动复制新生成的 View 到 Areas 的 View 文件夹下"></a><strong>3. 自动复制新生成的 View 到 Areas 的 View 文件夹下</strong></h3><p>为了使我们在MyMvcAreasDemo.Admin自动生成的View自动同步到MyMvcAreasDemo/Areas/Admin/Views文件夹中，可以使用“生成事件（Build Event）”里的“Post-Build Event”，打开MyMvcAreasDemo.Admin的属性，修改如下图所示：</p><p><img src="/assets/161129_autocopybuidevent_04.png" alt></p><p>生成事件为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &quot;$(SolutionDir)$(SolutionName)\Areas\Admin\Views&quot;</span><br><span class="line">xcopy &quot;$(ProjectDir)Views&quot; &quot;$(SolutionDir)$(SolutionName)\Areas\Admin\Views&quot; /S /E /C /Y</span><br></pre></td></tr></table></figure><p>意思其实很简单，相信大家都能看得懂，就是完全复制MyMvcAreasDemo.Admin的Views文件夹下所有文件至MyMvcAreasDemo/Areas/Admin/Views中。</p><p>现在再次访问/Admin/Home/List就可以得到正确结果了，并且你可以发现List.cshtml已经被复制到MyMvcAreasDemo/Areas/Admin/Views/Home目录里。</p><h3 id="4-另一种思路"><a href="#4-另一种思路" class="headerlink" title="4. 另一种思路"></a><strong>4. 另一种思路</strong></h3><p>可以直接把 MyMvcAreasDemo.Admin 这个项目创建在 Area 文件夹里, 这里就可以省去 步骤3 的自动复制了</p>]]></content>
      
      
      
        <tags>
            
            <tag> asp.net </tag>
            
            <tag> mvc </tag>
            
            <tag> area </tag>
            
            <tag> route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Visual Studio 中使用 gulp</title>
      <link href="/2016/10/28/gulp_in_visualStudio/"/>
      <url>/2016/10/28/gulp_in_visualStudio/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Gulp"><a href="#What-is-Gulp" class="headerlink" title="What is Gulp?"></a>What is Gulp?</h2><p>Gulp calls itself <em>the streaming build system</em>. No, this isn’t a replacement for build systems like msbuild or nant. In this case, we are talking about building the client side parts of our applications like JavaScript files, StyleSheets (CSS, SASS or LESS) and HTML files.</p><p>The basic idea with Gulp is that you use pipes to stream a set of data (usually files) through some kind of processing. As it turns out, it is pretty easy to use and is probably best described using an example.</p><h3 id="Installing-Node-and-Gulp"><a href="#Installing-Node-and-Gulp" class="headerlink" title="Installing Node and Gulp"></a>Installing Node and Gulp</h3><p>If you don’t already have it installed, <a href="http://nodejs.org/" target="_blank" rel="noopener">download and install node.js</a>.</p><blockquote><p>If you are using VS 2015 and ASP.NET 5, Visual Studio will install npm and gulp for you automatically.</p></blockquote><p>Once node is installed, we need to install gulp using the node package manager (npm). From the command line, run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Setting-up-your-Visual-Studio-project"><a href="#Setting-up-your-Visual-Studio-project" class="headerlink" title="Setting up your Visual Studio project"></a>Setting up your Visual Studio project</h3><p>Rather than create a new sample project here, I’m going to use the <a href="http://www.johnpapa.net/hot-towel-angular/" target="_blank" rel="noopener">Hot Towel SPA template</a> from <a href="http://www.johnpapa.net/" target="_blank" rel="noopener">John Papa</a>. First, I will create an new empty web application and then install the HotTowel.Angular nuget package.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package HotTowel.Angular</span><br></pre></td></tr></table></figure><p>I wanted to use this template as an example because it is a perfect candidate for Gulp. The application is written using AngularJS and the code is split across 14 different JS files. From a code maintenance / readability standpoint, it is definitely good to split the code into files like this. From an application loading performance standpoint however, loading 14 separate JS files is generally not a great idea.</p><h3 id="Initializing-our-project-for-Gulp"><a href="#Initializing-our-project-for-Gulp" class="headerlink" title="Initializing our project for Gulp"></a>Initializing our project for Gulp</h3><p>First, we need to create a package.json file in the root directory of the your project. We can do this by running npm init on the command line or simply creating a file with the following contents:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   &quot;name&quot;: &quot;YourProjectName&quot;,</span><br><span class="line"></span><br><span class="line">   &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we will install a few packages that we will use for this project. Run the following commands from the same folder that you added the <code>package.json</code> file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br><span class="line">npm install gulp-concat --save-dev</span><br><span class="line">npm install gulp-uglify --save-dev</span><br><span class="line">npm install del --save-dev</span><br></pre></td></tr></table></figure><p>Note, the –save-dev option here is telling node to add these packages to a devDependencies section in the package.json file and install the packages in a node_modules folder in the current folder . At any time, you or another developer on your team can re-install all the devDependencies by simply running <strong><code>npm install</code></strong>.</p><blockquote><p>the gulpfile.js content can change whatever you want</p></blockquote><p>Finally, create a gulpfile.js file in the same folder.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// include plug-ins</span><br><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var concat = require(&apos;gulp-concat&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var del = require(&apos;del&apos;);</span><br><span class="line"></span><br><span class="line">var config = &#123;</span><br><span class="line">    //Include all js files but exclude any min.js files</span><br><span class="line">    src: [&apos;app/**/*.js&apos;, &apos;!app/**/*.min.js&apos;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//delete the output file(s)</span><br><span class="line">gulp.task(&apos;clean&apos;, function () &#123;</span><br><span class="line">    //del is an async function and not a gulp plugin (just standard nodejs)</span><br><span class="line">    //It returns a promise, so make sure you return that from this task function</span><br><span class="line">    //  so gulp knows when the delete is complete</span><br><span class="line">    return del([&apos;app/all.min.js&apos;]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Combine and minify all files from the app folder</span><br><span class="line">// This tasks depends on the clean task which means gulp will ensure that the </span><br><span class="line">// Clean task is completed before running the scripts task.</span><br><span class="line">gulp.task(&apos;scripts&apos;, [&apos;clean&apos;], function () &#123;</span><br><span class="line"></span><br><span class="line">    return gulp.src(config.src)</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(concat(&apos;all.min.js&apos;))</span><br><span class="line">      .pipe(gulp.dest(&apos;app/&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Set a default tasks</span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;scripts&apos;], function () &#123; &#125;);</span><br></pre></td></tr></table></figure><p>Now, run gulp from the command line and you should see some output stating that scripts task is completed successfully.</p><p>This will have created an all.min.js file that contains minified JavaScript from all the js files in the app folder.</p><p>Now we include all.min.js in the Visual Studio project and replace the 14 separate script includes with a single include to the new script.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;app/all.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="Watching-for-changes"><a href="#Watching-for-changes" class="headerlink" title="Watching for changes"></a>Watching for changes</h3><p>Wouldn’t it be nice gulp could automatically re-run the scripts task whenever we make a change any of our js files? Sure, we can do that!</p><p>Add the following to our <code>gulpfile.js</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(&apos;watch&apos;, function()&#123;</span><br><span class="line">    return gulp.watch(config.src, [&apos;scripts&apos;]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Now, if we run <code>gulp watch</code> from the command line, our new <code>watch</code> task will watch for changes to any of our js files. When a change is detected it will trigger the <code>scripts</code> task to execute, regenerating the all.min.js file.</p><p>You can learn more about gulp.watch <a href="https://github.com/gulpjs/gulp/blob/master/docs/API.md#gulpwatchglob--opts-tasks-or-gulpwatchglob--opts-cb" target="_blank" rel="noopener">here</a>. Note that at this time, the built in gulp.watch has some bugs that stop it from watching new files. These should be fixed soon but in the mean time you might want to use use the popular <a href="https://github.com/floatdrop/gulp-watch/blob/master/docs/readme.md#starting-tasks-on-events" target="_blank" rel="noopener">gulp-watch plugin</a>.</p><h3 id="Integrating-with-Visual-Studio"><a href="#Integrating-with-Visual-Studio" class="headerlink" title="Integrating with Visual Studio"></a>Integrating with Visual Studio</h3><p>So far, we have been working primarily in the command line. It would be nice if we could integrate with our existing Visual Studio experience.</p><p>Luckily, we can with the new <a href="http://visualstudiogallery.msdn.microsoft.com/8e1b4368-4afb-467a-bc13-9650572db708" target="_blank" rel="noopener">Task Runner Explorer</a> plugin. Once the plugin is installed, open the Task Runner Explorer from the View –&gt; Other Windows –&gt; Task Runner Explorer menu.</p><p>This window will show you all the tasks in the gulp file and allow you to bind those tasks to certain Visual Studio events. This way, we don’t need to remember to run the gulp tasks from the command line. The IDE can handle it for us.</p><p>What I like to do is bind the <code>watch</code> task to the Solution Open event and bind the <code>scripts</code> task to the <em>Before Build</em> event.</p><p>With these bindings, we can make sure that all.min.js is correctly generated when we build the application and also regenerated anytime I make changes to the js files.</p><p>The Task Runner Explorer also shows the output of any running tasks. Here you can see the output from the watch task, which is always running in the background in this configuration.</p><h3 id="Development-vs-Production"><a href="#Development-vs-Production" class="headerlink" title="Development vs Production"></a>Development vs Production</h3><p>To simplify debugging, you may want to include all your individual scripts in a development build and only include the single concatenated/minified script in your production build. Take a look at my post on <a href="http://www.davepaquette.com/archive/2015/05/05/web-optimization-development-and-production-in-asp-net-mvc6.aspx" target="_blank" rel="noopener">Web Optimization in ASP.NET Core MVC</a> for some ideas on how to this can be accomplished. That post covers ASP.NET Core MVC but a similar approach could be used in MVC 5. With the following in your cshtml file, the individual files would be included when debug=”true” is set in your web.config. If debug=”false”, then only the single concatenated/minified file is included.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">@if (HttpContext.Current.IsDebuggingEnabled)</span><br><span class="line">&#123;</span><br><span class="line">    &lt;!-- Bootstrapping --&gt;</span><br><span class="line">    &lt;script src=&quot;app/app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/config.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/config.exceptionHandler.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/config.route.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- common Modules --&gt;</span><br><span class="line">    &lt;script src=&quot;app/common/common.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/common/logger.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/common/spinner.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- common.bootstrap Modules --&gt;</span><br><span class="line">    &lt;script src=&quot;app/common/bootstrap/bootstrap.dialog.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- app --&gt;</span><br><span class="line">    &lt;script src=&quot;app/admin/admin.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/dashboard/dashboard.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/layout/shell.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/layout/sidebar.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- app Services --&gt;</span><br><span class="line">    &lt;script src=&quot;app/services/datacontext.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;app/services/directives.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &lt;script src=&quot;app/all.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that this only works for cshtml files in an MVC application as it requires the Razor view engine.</p>]]></content>
      
      
      
        <tags>
            
            <tag> gulp </tag>
            
            <tag> Visual Stduio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 VS2013 中使用 bower</title>
      <link href="/2016/10/26/bower_in_vs2013/"/>
      <url>/2016/10/26/bower_in_vs2013/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>VS2015 和 Asp.Net Core 的发布, 集成了很多方便的前端工具, bower 就是其中之一. 我们使用 bower 可以很方便的安装项目所依赖的前端库.<br>同样在 VS2013 或者 VS2015 中创建 MVC5 项目时, 我们也可以使用 bower.</p><h2 id="安装-Node-和-Bower-和-Git"><a href="#安装-Node-和-Bower-和-Git" class="headerlink" title="安装 Node 和 Bower 和 Git"></a>安装 Node 和 Bower 和 Git</h2><ol><li><p>要安装 Node, <a href="http://nodejs.org/" target="_blank" rel="noopener">download and install node.js</a></p></li><li><p>使用 Node 中集成的 npm 安装 bower </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bower -g</span><br></pre></td></tr></table></figure></li><li><p>安装 Git</p></li></ol><a id="more"></a><h2 id="为项目添加-Bower"><a href="#为项目添加-Bower" class="headerlink" title="为项目添加 Bower"></a>为项目添加 Bower</h2><h3 id="在项目中创建一个新的-bower-json-文件"><a href="#在项目中创建一个新的-bower-json-文件" class="headerlink" title="在项目中创建一个新的 bower.json 文件"></a>在项目中创建一个新的 bower.json 文件</h3><ol><li><p>第一种方式</p><p> 在项目目录下打开控制台, 运行 <code>bower init</code> 命令, 按步骤初始化完成</p></li><li><p>第二种方式</p><p> 使用 VS2013 或 VS2015 在项目中, 右键新建 bower.json 项</p></li></ol><h3 id="使用-bower"><a href="#使用-bower" class="headerlink" title="使用 bower"></a>使用 bower</h3><ol><li><p>第一种方式 – 直接在控制台中运行命令</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bower install jquery --save</span><br></pre></td></tr></table></figure></li><li><p>第二种方式 – 使用 VS 执行</p><p> 在 bower.json 文件的 dependencies 下添加所需要的前端库; 右键 bower.json 文件; Restore Packages;</p></li></ol><blockquote><p>默认情况下, bower components 被安装在 bower_components 文件夹下. 通常不需要将此文件夹包含在项目中, 也不会加入到源码管理中. 使用 <code>bower install</code> 可以轻松地恢复这些文件.</p></blockquote><h3 id="从-bower-components-文件夹中获取需要的文件"><a href="#从-bower-components-文件夹中获取需要的文件" class="headerlink" title="从 bower_components 文件夹中获取需要的文件"></a>从 bower_components 文件夹中获取需要的文件</h3><p>有些人直接将 bower_components 文件夹包含在项目中, 并且直接引用 JavaScritp/Css文件. 通常 bower_components文件夹包含很多我们不需要的东西. 最好的做法是, 把需要的文件复制到其他文件夹并且引入到项目中. 使用 client side build system, 如: <a href="http://gruntjs.com/" target="_blank" rel="noopener">Grunt</a> 或者 <a href="http://gulpjs.com/" target="_blank" rel="noopener">Gulp</a> 可以很容易做到. 我们使用 Gulp.</p><p>为我们的项目设置 Gulp, 可以参考 <a href="gulp_in_visualStudio.md">How to use Gulp in Visual Studio</a></p><p>对于 gulp 文件, 我们需要使用下面的这些 node 模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br><span class="line">npm install gulp-concat --save-dev</span><br><span class="line">npm install gulp-uglify --save-dev</span><br><span class="line">npm install del --save-dev </span><br><span class="line">npm install gulp-bower --save-dev </span><br><span class="line">npm install gulp-minify-css --save-dev</span><br></pre></td></tr></table></figure><p>下面是 gulpfile.js 文件, MVC中由新项目模板创建的. 注释解释了每一个 gulp task 做的事情.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">///</span><br><span class="line">// include plug-ins</span><br><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var concat = require(&apos;gulp-concat&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var del = require(&apos;del&apos;);</span><br><span class="line">var minifyCSS = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var copy = require(&apos;gulp-copy&apos;);</span><br><span class="line">var bower = require(&apos;gulp-bower&apos;);</span><br><span class="line">var sourcemaps = require(&apos;gulp-sourcemaps&apos;);</span><br><span class="line"></span><br><span class="line">var config = &#123;</span><br><span class="line">    //JavaScript files that will be combined into a jquery bundle</span><br><span class="line">    jquerysrc: [</span><br><span class="line">        &apos;bower_components/jquery/dist/jquery.min.js&apos;,</span><br><span class="line">        &apos;bower_components/jquery-validation/dist/jquery.validate.min.js&apos;,</span><br><span class="line">        &apos;bower_components/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js&apos;</span><br><span class="line">    ],</span><br><span class="line">    jquerybundle: &apos;Scripts/jquery-bundle.min.js&apos;,</span><br><span class="line"></span><br><span class="line">    //JavaScript files that will be combined into a Bootstrap bundle</span><br><span class="line">    bootstrapsrc: [</span><br><span class="line">        &apos;bower_components/bootstrap/dist/js/bootstrap.min.js&apos;,</span><br><span class="line">        &apos;bower_components/respond-minmax/dest/respond.min.js&apos;</span><br><span class="line">    ],</span><br><span class="line">    bootstrapbundle: &apos;Scripts/bootstrap-bundle.min.js&apos;,</span><br><span class="line"></span><br><span class="line">    //Modernizr</span><br><span class="line">    modernizrsrc: [&apos;bower_components/modernizr/modernizr.js&apos;],</span><br><span class="line">    modernizrbundle: &apos;Scripts/modernizer.min.js&apos;,</span><br><span class="line"></span><br><span class="line">    //Bootstrap CSS and Fonts</span><br><span class="line">    bootstrapcss: &apos;bower_components/bootstrap/dist/css/bootstrap.css&apos;,</span><br><span class="line">    boostrapfonts: &apos;bower_components/bootstrap/dist/fonts/*.*&apos;,</span><br><span class="line"></span><br><span class="line">    appcss: &apos;Content/Site.css&apos;,</span><br><span class="line">    fontsout: &apos;Content/dist/fonts&apos;,</span><br><span class="line">    cssout: &apos;Content/dist/css&apos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Synchronously delete the output script file(s)</span><br><span class="line">gulp.task(&apos;clean-vendor-scripts&apos;, function (cb) &#123;</span><br><span class="line">    del([config.jquerybundle,</span><br><span class="line">              config.bootstrapbundle,</span><br><span class="line">              config.modernizrbundle], cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Create a jquery bundled file</span><br><span class="line">gulp.task(&apos;jquery-bundle&apos;, [&apos;clean-vendor-scripts&apos;, &apos;bower-restore&apos;], function () &#123;</span><br><span class="line">    return gulp.src(config.jquerysrc)</span><br><span class="line">     .pipe(concat(&apos;jquery-bundle.min.js&apos;))</span><br><span class="line">     .pipe(gulp.dest(&apos;Scripts&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Create a bootstrap bundled file</span><br><span class="line">gulp.task(&apos;bootstrap-bundle&apos;, [&apos;clean-vendor-scripts&apos;, &apos;bower-restore&apos;], function () &#123;</span><br><span class="line">    return gulp.src(config.bootstrapsrc)</span><br><span class="line">     .pipe(sourcemaps.init())</span><br><span class="line">     .pipe(concat(&apos;bootstrap-bundle.min.js&apos;))</span><br><span class="line">     .pipe(sourcemaps.write(&apos;maps&apos;))</span><br><span class="line">     .pipe(gulp.dest(&apos;Scripts&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Create a modernizr bundled file</span><br><span class="line">gulp.task(&apos;modernizer&apos;, [&apos;clean-vendor-scripts&apos;, &apos;bower-restore&apos;], function () &#123;</span><br><span class="line">    return gulp.src(config.modernizrsrc)</span><br><span class="line">        .pipe(sourcemaps.init())</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(concat(&apos;modernizer-min.js&apos;))</span><br><span class="line">        .pipe(sourcemaps.write(&apos;maps&apos;))</span><br><span class="line">        .pipe(gulp.dest(&apos;Scripts&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Combine and the vendor files from bower into bundles (output to the Scripts folder)</span><br><span class="line">gulp.task(&apos;vendor-scripts&apos;, [&apos;jquery-bundle&apos;, &apos;bootstrap-bundle&apos;, &apos;modernizer&apos;], function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Synchronously delete the output style files (css / fonts)</span><br><span class="line">gulp.task(&apos;clean-styles&apos;, function (cb) &#123;</span><br><span class="line">    del([config.fontsout,</span><br><span class="line">              config.cssout],cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;css&apos;, [&apos;clean-styles&apos;, &apos;bower-restore&apos;], function () &#123;</span><br><span class="line">    return gulp.src([config.bootstrapcss, config.appcss])</span><br><span class="line">     .pipe(concat(&apos;app.css&apos;))</span><br><span class="line">     .pipe(gulp.dest(config.cssout))</span><br><span class="line">     .pipe(minifyCSS())</span><br><span class="line">     .pipe(concat(&apos;app.min.css&apos;))</span><br><span class="line">     .pipe(gulp.dest(config.cssout));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;fonts&apos;, [&apos;clean-styles&apos;, &apos;bower-restore&apos;], function () &#123;</span><br><span class="line">    return</span><br><span class="line">    gulp.src(config.boostrapfonts)</span><br><span class="line">        .pipe(gulp.dest(config.fontsout));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Combine and minify css files and output fonts</span><br><span class="line">gulp.task(&apos;styles&apos;, [&apos;css&apos;, &apos;fonts&apos;], function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Restore all bower packages</span><br><span class="line">gulp.task(&apos;bower-restore&apos;, function() &#123;</span><br><span class="line">    return bower();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Set a default tasks</span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;vendor-scripts&apos;, &apos;styles&apos;], function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var concat = require(&apos;gulp-concat&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var del = require(&apos;del&apos;);</span><br><span class="line">var minifyCSS = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var copy = require(&apos;gulp-copy&apos;);</span><br><span class="line">var bower = require(&apos;gulp-bower&apos;);</span><br><span class="line">var sourcemaps = require(&apos;gulp-sourcemaps&apos;);</span><br><span class="line"></span><br><span class="line">var config = &#123;</span><br><span class="line">    //JavaScript files that will be combined into a jquery bundle</span><br><span class="line">    jssrc: [</span><br><span class="line">        &apos;bower_components/**/*.min.js&apos;</span><br><span class="line">        , &apos;bower_components/**/*.js&apos;</span><br><span class="line">    ]</span><br><span class="line">    , jsout: &apos;Scripts/lib&apos;</span><br><span class="line"></span><br><span class="line">    //CSS and Fonts</span><br><span class="line">    , cssfontsrc: [&apos;bower_components/**/*.min.css&apos;</span><br><span class="line">                ,&apos;bower_components/**/*.&#123;otf,eot,svg,ttf,woff,woff2&#125;&apos;]</span><br><span class="line">    , cssfontout: &apos;Content/lib/css&apos;</span><br><span class="line">    , deleteend: &apos;/*&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Synchronously delete the output script file(s)</span><br><span class="line">//gulp.task(&apos;clean-vendor-scripts&apos;, function (cb) &#123;</span><br><span class="line">//    del(&quot;Scripts/lib/*&quot;, cb);</span><br><span class="line">//&#125;);</span><br><span class="line"></span><br><span class="line">//Create a jquery bundled file</span><br><span class="line">gulp.task(&apos;jsfile-copy&apos;, function (cb) &#123;</span><br><span class="line">    del(config.jsout + +config.deleteend, cb);</span><br><span class="line"></span><br><span class="line">    // copy js</span><br><span class="line">    return gulp.src(config.jssrc)</span><br><span class="line">           .pipe(gulp.dest(config.jsout));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// Synchronously delete the output style files (css / fonts)</span><br><span class="line">//gulp.task(&apos;clean-styles&apos;, function (cb) &#123;</span><br><span class="line">//    del([config.fontsout,</span><br><span class="line">//              config.cssout], cb);</span><br><span class="line">//&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;cssfont-copy&apos;, function (cb) &#123;</span><br><span class="line">    del(config.cssfontout + config.deleteend, cb);</span><br><span class="line"></span><br><span class="line">    // copy css and font</span><br><span class="line">    return gulp.src(config.cssfontsrc)</span><br><span class="line">               .pipe(gulp.dest(config.cssfontout))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Restore all bower packages</span><br><span class="line">gulp.task(&apos;bower-restore&apos;, function () &#123;</span><br><span class="line">    return bower();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//Set a default tasks</span><br><span class="line">gulp.task(&apos;default&apos;, [&apos;jsfile-copy&apos;, &apos;cssfont-copy&apos;], function () &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在 command line 中, 使用 run gulp 运行 gulp tasks. 会输出一些 min.js 文件到 Scripts 文件夹、一些 css 和 font 文件到 Contents/dist 文件夹. 在 Visual Studio中, 包含这些新的文件到项目中.</p><h3 id="移除-NuGet-Packages"><a href="#移除-NuGet-Packages" class="headerlink" title="移除 NuGet Packages"></a>移除 NuGet Packages</h3><p>如果项目中存在 NuGet 安装的一些 script 和 css, 可以 uninstall 这些.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Uninstall-Package Microsoft.jQuery.Unobtrusive.Validation</span><br><span class="line"></span><br><span class="line">Uninstall-Package jQuery.Validation</span><br><span class="line"></span><br><span class="line">Uninstall-Package Bootstrap</span><br><span class="line"></span><br><span class="line">Uninstall-Package jQuery</span><br><span class="line"></span><br><span class="line">Uninstall-Package Respond</span><br><span class="line"></span><br><span class="line">Uninstall-Package Modernizr</span><br></pre></td></tr></table></figure><h3 id="引用-Scripts-和-styles"><a href="#引用-Scripts-和-styles" class="headerlink" title="引用 Scripts 和 styles"></a>引用 Scripts 和 styles</h3><p>使用新的脚本和样式文件替换原来的目录.</p><h3 id="确保-Gulp-在运行项目之前先运行一次"><a href="#确保-Gulp-在运行项目之前先运行一次" class="headerlink" title="确保 Gulp 在运行项目之前先运行一次"></a>确保 Gulp 在运行项目之前先运行一次</h3><p>打开 Task Explorer window. 选择默认的 gulp task, 右键点击, select Bindings-&gt; Before Build.<br>这样默认的 gulp task 将会在每次编译之前运行了.</p>]]></content>
      
      
      <categories>
          
          <category> bower </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bower </tag>
            
            <tag> VS2013 </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull时保存或删除凭证</title>
      <link href="/2016/10/19/git_command/"/>
      <url>/2016/10/19/git_command/</url>
      
        <content type="html"><![CDATA[<h4 id="保存Git凭证"><a href="#保存Git凭证" class="headerlink" title="保存Git凭证:"></a>保存Git凭证:</h4><p><code>git config --local credential.helperstore</code></p><h4 id="删除已经保存的凭证"><a href="#删除已经保存的凭证" class="headerlink" title="删除已经保存的凭证:"></a>删除已经保存的凭证:</h4><p><code>git config --local credential.helperremove</code></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>beego Config 说明</title>
      <link href="/2016/10/19/go-beego-config/"/>
      <url>/2016/10/19/go-beego-config/</url>
      
        <content type="html"><![CDATA[<ul><li><p>beego.BConfig</p><ul><li><p>AppName </p></li><li><p>RunMode </p></li><li><p>RouterCaseSensitive </p></li><li><p>ServerName </p></li><li><p>RecoverPanic </p></li><li><p>CopyRequestBody </p></li><li><p>EnableGzip </p></li><li><p>MaxMemory </p></li><li><p>EnableErrorsShow </p></li><li><p><strong>WebConfig</strong></p><ul><li><p>AutoRender </p></li><li><p>EnableDocs </p></li><li><p>FlashName </p></li><li><p>FlashSeperator </p></li><li><p>DirectoryIndex </p></li><li><p>StaticDir </p><blockquote><p>单目录: StaticDir = download</p></blockquote><blockquote><p>多目录: StaticDir = download:down download2:down2</p></blockquote></li><li><p>StaticExtensionsToGzip</p><blockquote><p>StaticExtensionsToGzip = .css, .js</p></blockquote></li><li><p>TemplateLeft</p><blockquote><p>模板左标签，默认值是{{</p></blockquote><blockquote><p>beego.BConfig.WebConfig.TemplateLeft=”{{“</p></blockquote></li><li><p>TemplateRight</p><blockquote><p>模板右标签，默认值是}}</p></blockquote><blockquote><p>beego.BConfig.WebConfig.TemplateRight=”{{“</p></blockquote></li><li><p>ViewsPath</p></li><li><p>EnableXSRF</p></li><li><p>XSRFKEY</p></li><li><p>XSRFExpire</p></li><li><p><strong>Session</strong></p><ul><li>SessionOn</li><li>SessionProvider</li><li>SessionName</li><li>SessionGCMaxLifetime</li><li>SessionProviderConfig</li><li>SessionCookieLifeTime</li><li>SessionAutoSetCookie</li><li>SessionDomain</li></ul></li></ul></li><li><p><strong>Listen</strong></p><ul><li>Graceful</li><li>ServerTimeOut</li><li>ListenTCP4</li><li>EnableHTTP</li><li>HTTPAddr</li><li>HTTPPort</li><li>EnableHTTPS</li><li>HTTPSAddr</li><li>HTTPSPort</li><li>HTTPSCertFile</li><li>HTTPSKeyFile</li><li>EnableAdmin</li><li>AdminAddr</li><li>AdminPort</li><li>EnableFcgi</li><li>EnableStdIo</li></ul></li><li><p><strong>Log</strong></p><ul><li>AccessLogs</li><li>FileLineNum</li><li>Outputs</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>beego Config 说明</title>
      <link href="/2016/10/19/golang-beego-config/"/>
      <url>/2016/10/19/golang-beego-config/</url>
      
        <content type="html"><![CDATA[<ul><li><p>beego.BConfig</p><ul><li><p>AppName </p></li><li><p>RunMode </p></li><li><p>RouterCaseSensitive </p></li><li><p>ServerName </p></li><li><p>RecoverPanic </p></li><li><p>CopyRequestBody </p></li><li><p>EnableGzip </p></li><li><p>MaxMemory </p></li><li><p>EnableErrorsShow </p></li><li><p><strong>WebConfig</strong></p><ul><li><p>AutoRender </p></li><li><p>EnableDocs </p></li><li><p>FlashName </p></li><li><p>FlashSeperator </p></li><li><p>DirectoryIndex </p></li><li><p>StaticDir </p><blockquote><p>单目录: StaticDir = download</p></blockquote><blockquote><p>多目录: StaticDir = download:down download2:down2</p></blockquote></li><li><p>StaticExtensionsToGzip</p><blockquote><p>StaticExtensionsToGzip = .css, .js</p></blockquote></li><li><p>TemplateLeft</p><blockquote><p>模板左标签，默认值是{{</p></blockquote><blockquote><p>beego.BConfig.WebConfig.TemplateLeft=”{{“</p></blockquote></li><li><p>TemplateRight</p><blockquote><p>模板右标签，默认值是}}</p></blockquote><blockquote><p>beego.BConfig.WebConfig.TemplateRight=”{{“</p></blockquote></li><li><p>ViewsPath</p></li><li><p>EnableXSRF</p></li><li><p>XSRFKEY</p></li><li><p>XSRFExpire</p></li><li><p><strong>Session</strong></p><ul><li>SessionOn</li><li>SessionProvider</li><li>SessionName</li><li>SessionGCMaxLifetime</li><li>SessionProviderConfig</li><li>SessionCookieLifeTime</li><li>SessionAutoSetCookie</li><li>SessionDomain</li></ul></li></ul></li><li><p><strong>Listen</strong></p><ul><li>Graceful</li><li>ServerTimeOut</li><li>ListenTCP4</li><li>EnableHTTP</li><li>HTTPAddr</li><li>HTTPPort</li><li>EnableHTTPS</li><li>HTTPSAddr</li><li>HTTPSPort</li><li>HTTPSCertFile</li><li>HTTPSKeyFile</li><li>EnableAdmin</li><li>AdminAddr</li><li>AdminPort</li><li>EnableFcgi</li><li>EnableStdIo</li></ul></li><li><p><strong>Log</strong></p><ul><li>AccessLogs</li><li>FileLineNum</li><li>Outputs</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在新的环境使搭建Hexo操作步骤</title>
      <link href="/2016/10/19/steps/"/>
      <url>/2016/10/19/steps/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><a id="more"></a><ol start="0"><li>确保已经安装了 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a></li><li>从 <a href="www.github.com">Github</a> Clone项目到一个文件夹</li><li>进入Clone完成后的文件夹内</li><li>执行 <code>git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></li><li>根据 <code>theme_source_config</code> 里的文件对比修改 <code>themes/yilia/</code> 里的文件</li><li>之后就可以在根目录的 <code>source</code> 文件夹 (注意: 不是<code>theme/yilia</code>下的 <code>source</code>) 中添加<code>Markdown</code>文件了</li><li>执行 <code>hexo</code> 的相应操作</li></ol><h2 id="yilia主题操作"><a href="#yilia主题操作" class="headerlink" title="yilia主题操作"></a>yilia主题操作</h2><p>地址: <strong><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a></strong></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p><code>$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</code></p><p style="color:red;">可以更改名称, 但要与 _config.yml 中填写的主题名称一致</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote><p>修改 hexo根目录(Clone完成后的文件夹) 下的_config.yml ： theme: yilia</p></blockquote><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes/yilia</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="配置文件说明"><a href="#配置文件说明" class="headerlink" title="配置文件说明"></a>配置文件说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"># Header</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  主页: /</span><br><span class="line">  随笔: /essay</span><br><span class="line">  心独白: /inner_monologue</span><br><span class="line"></span><br><span class="line"># SubNav</span><br><span class="line">subnav:</span><br><span class="line">  github: &quot;https://github.com/bogerv&quot;</span><br><span class="line">  weibo: &quot;#&quot;</span><br><span class="line">  #rss: &quot;#&quot;</span><br><span class="line">  zhihu: &quot;#&quot;</span><br><span class="line">  #douban: &quot;#&quot;</span><br><span class="line">  #mail: &quot;mailto:litten225@qq.com&quot;</span><br><span class="line">  #facebook: &quot;#&quot;</span><br><span class="line">  #google: &quot;#&quot;</span><br><span class="line">  #twitter: &quot;#&quot;</span><br><span class="line">  #linkedin: &quot;#&quot;</span><br><span class="line"></span><br><span class="line">rss: /atom.xml</span><br><span class="line"></span><br><span class="line"># 是否需要修改 root 路径</span><br><span class="line"># 如果您的网站存放在子目录中，例如 http://yoursite.com/blog，</span><br><span class="line"># 请将您的 url 设为 http://yoursite.com/blog 并把 root 设为 /blog/。</span><br><span class="line">root: </span><br><span class="line"></span><br><span class="line"># Content</span><br><span class="line"></span><br><span class="line"># 文章太长，截断按钮文字</span><br><span class="line">excerpt_link: more</span><br><span class="line"># 文章卡片右下角常驻链接，不需要请设置为false</span><br><span class="line">show_all_link: &apos;展开全文&apos;</span><br><span class="line"># 数学公式</span><br><span class="line">mathjax: false</span><br><span class="line"># 是否在新窗口打开链接</span><br><span class="line">open_in_new: false</span><br><span class="line"></span><br><span class="line"># 打赏</span><br><span class="line"># 请在需要打赏的文章的md文件头部，设置属性reward: true</span><br><span class="line"></span><br><span class="line"># 打赏基础设定：0-关闭打赏； 1-文章对应的md文件里有reward:true属性，才有打赏； 2-所有文章均有打赏</span><br><span class="line">reward_type: 1</span><br><span class="line"># 打赏wording</span><br><span class="line">reward_wording: &apos;谢谢你请我吃糖果&apos;</span><br><span class="line"># 支付宝二维码图片地址，跟你设置头像的方式一样。比如：/assets/img/alipay.jpg</span><br><span class="line">alipay: </span><br><span class="line"># 微信二维码图片地址</span><br><span class="line">weixin: </span><br><span class="line"></span><br><span class="line"># Miscellaneous</span><br><span class="line">google_analytics: &apos;&apos;</span><br><span class="line">favicon: favicon.png</span><br><span class="line"></span><br><span class="line">#你的头像url</span><br><span class="line">avatar: /assets/img/favicon.jpg</span><br><span class="line"></span><br><span class="line">#是否开启分享</span><br><span class="line">share_jia: false</span><br><span class="line"></span><br><span class="line">#是否开启多说评论，填写你在多说申请的项目名称 duoshuo: duoshuo-key</span><br><span class="line">#若使用disqus，请在博客config文件中填写disqus_shortname，并关闭多说评论</span><br><span class="line">duoshuo: false</span><br><span class="line"></span><br><span class="line"># 智能菜单</span><br><span class="line"># 如不需要，将该对应项置为false</span><br><span class="line"># 比如</span><br><span class="line">#smart_menu:</span><br><span class="line">#  friends: false</span><br><span class="line">smart_menu:</span><br><span class="line">  innerArchive: &apos;所有文章&apos;</span><br><span class="line">  friends: &apos;友链&apos;</span><br><span class="line">  aboutme: &apos;关于我&apos;</span><br><span class="line"></span><br><span class="line">friends:</span><br><span class="line">  友情链接1: http://localhost:4000/</span><br><span class="line">  友情链接2: http://localhost:4000/</span><br><span class="line">  友情链接3: http://localhost:4000/</span><br><span class="line">  友情链接4: http://localhost:4000/</span><br><span class="line">  友情链接5: http://localhost:4000/</span><br><span class="line">  友情链接6: http://localhost:4000/</span><br><span class="line"></span><br><span class="line">aboutme: 很惭愧&lt;br&gt;&lt;br&gt;只做了一点微小的工作&lt;br&gt;谢谢大家</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 常用语法</title>
      <link href="/2016/10/08/markdown/"/>
      <url>/2016/10/08/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>标题可分为六级标题, # 逐级递加.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 司机标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表以 <code>*</code> 或者 <code>-</code> 开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 文本1</span><br><span class="line">* 文本1</span><br><span class="line">* 文本1</span><br><span class="line"></span><br><span class="line">- 文本1</span><br><span class="line">- 文本1</span><br><span class="line">- 文本1</span><br></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表以 <code>1.</code> <code>2.</code> <code>3.</code>开头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 文本1</span><br><span class="line">2. 文本2</span><br><span class="line">3. 文本3</span><br></pre></td></tr></table></figure><h2 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h2><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Google](www.google.com)</span><br></pre></td></tr></table></figure><h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>跳转到<a href="#abcd">bookmark_text</a>位置<br>或者<br>跳转到<a href="#abcd">abcd</a>位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">跳转到&lt;a href=&quot;#abcd&quot;&gt;bookmark_text&lt;/a&gt;位置</span><br><span class="line">或者</span><br><span class="line">跳转到[abcd](#abcd)位置</span><br></pre></td></tr></table></figure><p><span id="abcd">我是abcd</span></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](http://bogerv.wang/favicon.png)</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; 披繡闥, 俯雕甍, 山原曠其盈視, 川澤紆其駭矚. 閭閻撲地, 鐘鳴鼎食之家;</span><br><span class="line">&gt; 舸艦迷津, 青雀黃龍之舳. 雲銷雨霽, 彩徹區明. 落霞與孤鶩齊飛, 秋水共長天一色.</span><br><span class="line">&gt; 漁舟唱晚, 響窮彭蠡之濱, 雁陣驚寒, 聲斷衡陽之浦.</span><br></pre></td></tr></table></figure><h2 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**粗体**</span><br><span class="line">*斜体*</span><br></pre></td></tr></table></figure><h2 id="代码引用"><a href="#代码引用" class="headerlink" title="代码引用"></a>代码引用</h2><h4 id="单行引用"><a href="#单行引用" class="headerlink" title="单行引用"></a>单行引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`console.log(&apos;hello, world!&apos;)`</span><br></pre></td></tr></table></figure><h4 id="多行引用"><a href="#多行引用" class="headerlink" title="多行引用"></a>多行引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">`` ` csharp</span><br><span class="line">var hello = &quot;hello, world!&quot;;</span><br><span class="line">System.WriteLine(hello);</span><br><span class="line">`` `</span><br><span class="line">`` ` javascript</span><br><span class="line">var hello = &apos;hello, world!&apos;;</span><br><span class="line">console.log(hello);</span><br><span class="line">`` `</span><br><span class="line">注: 去掉上面`` `中的空格</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br></pre></td></tr></table></figure><h2 id="显示链接中带括号的图片"><a href="#显示链接中带括号的图片" class="headerlink" title="显示链接中带括号的图片"></a>显示链接中带括号的图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![][1]</span><br><span class="line">[1]: http://latex.codecogs.com/gif.latex?\prod%20\(n_&#123;i&#125;\)+1</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
